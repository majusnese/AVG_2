// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package marius.unifying_data_json_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Unifying_Data_JSON Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Unifying_Data_JSON implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Unifying_Data_JSON";
	private final String projectName = "MARIUS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Unifying_Data_JSON.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Unifying_Data_JSON.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJoin_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJoin_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputJSON_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_tUnite_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_tUnite_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_tUnite_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_tUnite_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.KundenId = this.KundenId;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.KundenId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.KundenId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Vorname = readString(dis, ois);

				this.Nachname = readString(dis, ois);

				this.Telefon = readString(dis, ois);

				this.E_Mail = readString(dis, ois);

				this.Geburtsdatum = readString(dis, ois);

				this.Geschlecht = readString(dis, ois);

				this.AdressId = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Vorname, dos, oos);

				writeString(this.Nachname, dos, oos);

				writeString(this.Telefon, dos, oos);

				writeString(this.E_Mail, dos, oos);

				writeString(this.Geburtsdatum, dos, oos);

				writeString(this.Geschlecht, dos, oos);

				writeString(this.AdressId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tHash_row5 begin ] start
				 */

				ok_Hash.put("tHash_row5", false);
				start_Hash.put("tHash_row5", System.currentTimeMillis());

				currentComponent = "tHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tHash_row5 = 0;

				java.util.Map<row5Struct, row5Struct> tHash_row5 = new java.util.LinkedHashMap<row5Struct, row5Struct>();
				globalMap.put("tHash_row5", tHash_row5);

				/**
				 * [tHash_row5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Customers.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Customers.csv",
								"UTF-8", ";", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row5 = null;

						row5 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row5 = new row5Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row5.Vorname = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row5.Nachname = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row5.KundenId = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"KundenId", "row5",
															temp,
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
								}

							} else {

								row5.KundenId = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row5.Telefon = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row5.E_Mail = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row5.Geburtsdatum = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row5.Geschlecht = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row5.AdressId = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tHash_row5 main ] start
							 */

							currentComponent = "tHash_row5";

							// row5
							// row5

							if (execStat) {
								runStat.updateStatOnConnection("row5"
										+ iterateId, 1, 1);
							}

							row5Struct row5_HashRow = new row5Struct();

							row5_HashRow.Vorname = row5.Vorname;
							row5_HashRow.Nachname = row5.Nachname;
							row5_HashRow.KundenId = row5.KundenId;
							row5_HashRow.Telefon = row5.Telefon;
							row5_HashRow.E_Mail = row5.E_Mail;
							row5_HashRow.Geburtsdatum = row5.Geburtsdatum;
							row5_HashRow.Geschlecht = row5.Geschlecht;
							row5_HashRow.AdressId = row5.AdressId;
							tHash_row5.put(row5_HashRow, row5_HashRow);

							tos_count_tHash_row5++;

							/**
							 * [tHash_row5 main ] stop
							 */

							/**
							 * [tHash_row5 process_data_begin ] start
							 */

							currentComponent = "tHash_row5";

							/**
							 * [tHash_row5 process_data_begin ] stop
							 */

							/**
							 * [tHash_row5 process_data_end ] start
							 */

							currentComponent = "tHash_row5";

							/**
							 * [tHash_row5 process_data_end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Customers.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tHash_row5 end ] start
				 */

				currentComponent = "tHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tHash_row5", true);
				end_Hash.put("tHash_row5", System.currentTimeMillis());

				/**
				 * [tHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tHash_row5 finally ] start
				 */

				currentComponent = "tHash_row5";

				/**
				 * [tHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.AdressId == null) ? 0 : this.AdressId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.AdressId == null) {
				if (other.AdressId != null)
					return false;

			} else if (!this.AdressId.equals(other.AdressId))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.AdressId = this.AdressId;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.AdressId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AdressId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.KundenId = readInteger(dis, ois);

				this.IBAN = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Einkommen = null;
				} else {
					this.Einkommen = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Kreditlimit = null;
				} else {
					this.Kreditlimit = dis.readFloat();
				}

				this.Score = readInteger(dis, ois);

				this.Vorname = readString(dis, ois);

				this.Nachname = readString(dis, ois);

				this.Telefon = readString(dis, ois);

				this.E_Mail = readString(dis, ois);

				this.Geburtsdatum = readString(dis, ois);

				this.Geschlecht = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.KundenId, dos, oos);

				writeString(this.IBAN, dos, oos);

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				writeInteger(this.Score, dos, oos);

				writeString(this.Vorname, dos, oos);

				writeString(this.Nachname, dos, oos);

				writeString(this.Telefon, dos, oos);

				writeString(this.E_Mail, dos, oos);

				writeString(this.Geburtsdatum, dos, oos);

				writeString(this.Geschlecht, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.AdressId, other.AdressId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public Integer Kunden_ID;

		public Integer getKunden_ID() {
			return this.Kunden_ID;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Kunden_ID = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Kunden_ID, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Kunden_ID=" + String.valueOf(Kunden_ID));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_3Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public Integer Kunden_ID;

		public Integer getKunden_ID() {
			return this.Kunden_ID;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Kunden_ID = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Kunden_ID, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Kunden_ID=" + String.valueOf(Kunden_ID));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row7Struct row7 = new row7Struct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tJoin_2 - inputs:(row5,row7) outputs:(row8,row8)
				// | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_1 - inputs:(row8,row6) outputs:(out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tJoin_2 begin ] start
				 */

				ok_Hash.put("tJoin_2", false);
				start_Hash.put("tJoin_2", System.currentTimeMillis());

				currentComponent = "tJoin_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tJoin_2 = 0;

				final java.util.Map<row5Struct, row5Struct> tHash_tJoin_2 = (java.util.Map<row5Struct, row5Struct>) globalMap
						.get("tHash_row5");

				class Util_tJoin_2 {
					row5Struct lookupValue = null;
					row5Struct row5HashKey = new row5Struct();

					public boolean isJoined(row7Struct mainRow) {
						row5HashKey.KundenId = mainRow.Kunden_ID;

						row5HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_2.get(row5HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_2 util_tJoin_2 = new Util_tJoin_2();

				int nb_line_tJoin_2 = 0;

				/**
				 * [tJoin_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Accounts.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Accounts.csv",
								"US-ASCII", "|", "\n", false, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row7 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row7 = new row7Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row7.Kunden_ID = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Kunden_ID",
															"row7", temp,
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
								}

							} else {

								row7.Kunden_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row7.IBAN = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row7.Einkommen = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Einkommen",
															"row7", temp,
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
								}

							} else {

								row7.Einkommen = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 3;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row7.Kreditlimit = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Kreditlimit",
															"row7", temp,
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
								}

							} else {

								row7.Kreditlimit = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 4;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row7.Score = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Score", "row7",
															temp,
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
								}

							} else {

								row7.Score = null;

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tJoin_2 main ] start
							 */

							currentComponent = "tJoin_2";

							// row7
							// row7

							if (execStat) {
								runStat.updateStatOnConnection("row7"
										+ iterateId, 1, 1);
							}

							row8 = null;
							row8 = null;

							row8 = new row8Struct();
							row8.KundenId = row7.Kunden_ID;
							row8.IBAN = row7.IBAN;
							row8.Einkommen = row7.Einkommen;
							row8.Kreditlimit = row7.Kreditlimit;
							row8.Score = row7.Score;

							row8 = new row8Struct();
							row8.KundenId = row7.Kunden_ID;
							row8.IBAN = row7.IBAN;
							row8.Einkommen = row7.Einkommen;
							row8.Kreditlimit = row7.Kreditlimit;
							row8.Score = row7.Score;

							if (util_tJoin_2.isJoined(row7)) {
								row8.Vorname = util_tJoin_2.lookupValue.Vorname;
								row8.Nachname = util_tJoin_2.lookupValue.Nachname;
								row8.Telefon = util_tJoin_2.lookupValue.Telefon;
								row8.E_Mail = util_tJoin_2.lookupValue.E_Mail;
								row8.Geburtsdatum = util_tJoin_2.lookupValue.Geburtsdatum;
								row8.Geschlecht = util_tJoin_2.lookupValue.Geschlecht;
								row8.AdressId = util_tJoin_2.lookupValue.AdressId;
								row8.Vorname = util_tJoin_2.lookupValue.Vorname;
								row8.Nachname = util_tJoin_2.lookupValue.Nachname;
								row8.Telefon = util_tJoin_2.lookupValue.Telefon;
								row8.E_Mail = util_tJoin_2.lookupValue.E_Mail;
								row8.Geburtsdatum = util_tJoin_2.lookupValue.Geburtsdatum;
								row8.Geschlecht = util_tJoin_2.lookupValue.Geschlecht;
								row8.AdressId = util_tJoin_2.lookupValue.AdressId;
							}

							// /////////////////////

							tos_count_tJoin_2++;

							/**
							 * [tJoin_2 main ] stop
							 */

							/**
							 * [tJoin_2 process_data_begin ] start
							 */

							currentComponent = "tJoin_2";

							/**
							 * [tJoin_2 process_data_begin ] stop
							 */
							// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tAdvancedHash_row8 main ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								// row8
								// row8

								if (execStat) {
									runStat.updateStatOnConnection("row8"
											+ iterateId, 1, 1);
								}

								row8Struct row8_HashRow = new row8Struct();

								row8_HashRow.KundenId = row8.KundenId;

								row8_HashRow.IBAN = row8.IBAN;

								row8_HashRow.Einkommen = row8.Einkommen;

								row8_HashRow.Kreditlimit = row8.Kreditlimit;

								row8_HashRow.Score = row8.Score;

								row8_HashRow.Vorname = row8.Vorname;

								row8_HashRow.Nachname = row8.Nachname;

								row8_HashRow.Telefon = row8.Telefon;

								row8_HashRow.E_Mail = row8.E_Mail;

								row8_HashRow.Geburtsdatum = row8.Geburtsdatum;

								row8_HashRow.Geschlecht = row8.Geschlecht;

								row8_HashRow.AdressId = row8.AdressId;

								tHash_Lookup_row8.put(row8_HashRow);

								tos_count_tAdvancedHash_row8++;

								/**
								 * [tAdvancedHash_row8 main ] stop
								 */

								/**
								 * [tAdvancedHash_row8 process_data_begin ]
								 * start
								 */

								currentComponent = "tAdvancedHash_row8";

								/**
								 * [tAdvancedHash_row8 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row8 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								/**
								 * [tAdvancedHash_row8 process_data_end ] stop
								 */

							} // End of branch "row8"

							/**
							 * [tJoin_2 process_data_end ] start
							 */

							currentComponent = "tJoin_2";

							/**
							 * [tJoin_2 process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Accounts.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tJoin_2 end ] start
				 */

				currentComponent = "tJoin_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJoin_2", true);
				end_Hash.put("tJoin_2", System.currentTimeMillis());

				/**
				 * [tJoin_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tJoin_2"
			globalMap.remove("tHash_row5");

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tJoin_2 finally ] start
				 */

				currentComponent = "tJoin_2";

				/**
				 * [tJoin_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.KundenId = this.KundenId;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.KundenId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.KundenId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Vorname = readString(dis, ois);

				this.Nachname = readString(dis, ois);

				this.Telefon = readString(dis, ois);

				this.E_Mail = readString(dis, ois);

				this.Geburtsdatum = readString(dis, ois);

				this.Geschlecht = readString(dis, ois);

				this.AdressId = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Vorname, dos, oos);

				writeString(this.Nachname, dos, oos);

				writeString(this.Telefon, dos, oos);

				writeString(this.E_Mail, dos, oos);

				writeString(this.Geburtsdatum, dos, oos);

				writeString(this.Geschlecht, dos, oos);

				writeString(this.AdressId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tHash_row2 begin ] start
				 */

				ok_Hash.put("tHash_row2", false);
				start_Hash.put("tHash_row2", System.currentTimeMillis());

				currentComponent = "tHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tHash_row2 = 0;

				java.util.Map<row2Struct, row2Struct> tHash_row2 = new java.util.LinkedHashMap<row2Struct, row2Struct>();
				globalMap.put("tHash_row2", tHash_row2);

				/**
				 * [tHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				try {

					Object filename_tFileInputDelimited_4 = "C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Customers.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0
								|| random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Customers.csv",
								"UTF-8", ";", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null
							&& fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row2.Vorname = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row2.Nachname = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row2.KundenId = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"KundenId", "row2",
															temp,
															ex_tFileInputDelimited_4),
													ex_tFileInputDelimited_4));
								}

							} else {

								row2.KundenId = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 3;

							row2.Telefon = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 4;

							row2.E_Mail = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 5;

							row2.Geburtsdatum = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 6;

							row2.Geschlecht = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 7;

							row2.AdressId = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tHash_row2 main ] start
							 */

							currentComponent = "tHash_row2";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							row2Struct row2_HashRow = new row2Struct();

							row2_HashRow.Vorname = row2.Vorname;
							row2_HashRow.Nachname = row2.Nachname;
							row2_HashRow.KundenId = row2.KundenId;
							row2_HashRow.Telefon = row2.Telefon;
							row2_HashRow.E_Mail = row2.E_Mail;
							row2_HashRow.Geburtsdatum = row2.Geburtsdatum;
							row2_HashRow.Geschlecht = row2.Geschlecht;
							row2_HashRow.AdressId = row2.AdressId;
							tHash_row2.put(row2_HashRow, row2_HashRow);

							tos_count_tHash_row2++;

							/**
							 * [tHash_row2 main ] stop
							 */

							/**
							 * [tHash_row2 process_data_begin ] start
							 */

							currentComponent = "tHash_row2";

							/**
							 * [tHash_row2 process_data_begin ] stop
							 */

							/**
							 * [tHash_row2 process_data_end ] start
							 */

							currentComponent = "tHash_row2";

							/**
							 * [tHash_row2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Customers.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tHash_row2 end ] start
				 */

				currentComponent = "tHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tHash_row2", true);
				end_Hash.put("tHash_row2", System.currentTimeMillis());

				/**
				 * [tHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tHash_row2 finally ] start
				 */

				currentComponent = "tHash_row2";

				/**
				 * [tHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_1_row9Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_1_row9Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tHashInput_tUnite_1_row9Struct other = (tHashInput_tUnite_1_row9Struct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(tHashInput_tUnite_1_row9Struct other) {

			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;
			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;

		}

		public void copyKeysDataTo(tHashInput_tUnite_1_row9Struct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readString(dis);

					this.AdressId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// String

				writeString(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_1_row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outStruct implements
			routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outStruct other = (outStruct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(outStruct other) {

			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;
			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;

		}

		public void copyKeysDataTo(outStruct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readString(dis);

					this.AdressId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// String

				writeString(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public String address_id;

		public String getAddress_id() {
			return this.address_id;
		}

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.address_id = readString(dis);

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.address_id, dos);

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("address_id=" + address_id);
			sb.append(",Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outerStruct implements
			routines.system.IPersistableRow<outerStruct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outerStruct other = (outerStruct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(outerStruct other) {

			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;
			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;

		}

		public void copyKeysDataTo(outerStruct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readString(dis);

					this.AdressId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// String

				writeString(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outerStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.AdressId == null) ? 0 : this.AdressId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.AdressId == null) {
				if (other.AdressId != null)
					return false;

			} else if (!this.AdressId.equals(other.AdressId))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.AdressId = this.AdressId;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.AdressId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AdressId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.KundenId = readInteger(dis, ois);

				this.IBAN = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Einkommen = null;
				} else {
					this.Einkommen = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Kreditlimit = null;
				} else {
					this.Kreditlimit = dis.readFloat();
				}

				this.Score = readInteger(dis, ois);

				this.Vorname = readString(dis, ois);

				this.Nachname = readString(dis, ois);

				this.Telefon = readString(dis, ois);

				this.E_Mail = readString(dis, ois);

				this.Geburtsdatum = readString(dis, ois);

				this.Geschlecht = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.KundenId, dos, oos);

				writeString(this.IBAN, dos, oos);

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				writeInteger(this.Score, dos, oos);

				writeString(this.Vorname, dos, oos);

				writeString(this.Nachname, dos, oos);

				writeString(this.Telefon, dos, oos);

				writeString(this.E_Mail, dos, oos);

				writeString(this.Geburtsdatum, dos, oos);

				writeString(this.Geschlecht, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.AdressId, other.AdressId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public Integer Kunden_ID;

		public Integer getKunden_ID() {
			return this.Kunden_ID;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Kunden_ID = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Kunden_ID, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Kunden_ID=" + String.valueOf(Kunden_ID));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public Integer Kunden_ID;

		public Integer getKunden_ID() {
			return this.Kunden_ID;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Kunden_ID = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Kunden_ID, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Kunden_ID=" + String.valueOf(Kunden_ID));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_4Process(globalMap);

				row6Struct row6 = new row6Struct();
				outStruct out = new outStruct();

				row1Struct row1 = new row1Struct();
				row3Struct row3 = new row3Struct();
				outerStruct outer = new outerStruct();

				tHashInput_tUnite_1_row9Struct tHashInput_tUnite_1_row9 = new tHashInput_tUnite_1_row9Struct();

				/**
				 * [tHashOutput_tUnite_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_1", false);
				start_Hash.put("tHashOutput_tUnite_1",
						System.currentTimeMillis());

				currentComponent = "tHashOutput_tUnite_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"tHashInput_tUnite_1_tHashInput_tUnite_1_row9"
										+ iterateId, 0, 0);

					}
				}

				int tos_count_tHashOutput_tUnite_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row9Struct> tHashFile_tHashOutput_tUnite_1 = null;
				String hashKey_tHashOutput_tUnite_1 = "tHashFile_Unifying_Data_JSON_"
						+ pid + "_tHashOutput_tUnite_1";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_tUnite_1)) {
					if (mf_tHashOutput_tUnite_1.getResourceMap().get(
							hashKey_tHashOutput_tUnite_1) == null) {
						mf_tHashOutput_tUnite_1
								.getResourceMap()
								.put(hashKey_tHashOutput_tUnite_1,
										new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row9Struct>(
												org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_tUnite_1 = mf_tHashOutput_tUnite_1
								.getResourceMap().get(
										hashKey_tHashOutput_tUnite_1);
					} else {
						tHashFile_tHashOutput_tUnite_1 = mf_tHashOutput_tUnite_1
								.getResourceMap().get(
										hashKey_tHashOutput_tUnite_1);
					}
				}
				int nb_line_tHashOutput_tUnite_1 = 0;

				/**
				 * [tHashOutput_tUnite_1 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out" + iterateId, 0, 0);

					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("outer" + iterateId, 0,
								0);

					}
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outStruct out_tmp = new outStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				try {

					Object filename_tFileInputDelimited_5 = "C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Addresses.csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0
								|| random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Addresses.csv",
								"UTF-8", ";", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null
							&& fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						row6 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row6 = new row6Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							columnIndexWithD_tFileInputDelimited_5 = 0;

							row6.address_id = fid_tFileInputDelimited_5.get(
									columnIndexWithD_tFileInputDelimited_5)
									.trim();

							columnIndexWithD_tFileInputDelimited_5 = 1;

							row6.Stra_e = fid_tFileInputDelimited_5.get(
									columnIndexWithD_tFileInputDelimited_5)
									.trim();

							columnIndexWithD_tFileInputDelimited_5 = 2;

							row6.PLZ = fid_tFileInputDelimited_5.get(
									columnIndexWithD_tFileInputDelimited_5)
									.trim();

							columnIndexWithD_tFileInputDelimited_5 = 3;

							row6.Ort = fid_tFileInputDelimited_5.get(
									columnIndexWithD_tFileInputDelimited_5)
									.trim();

							columnIndexWithD_tFileInputDelimited_5 = 4;

							row6.Land = fid_tFileInputDelimited_5.get(
									columnIndexWithD_tFileInputDelimited_5)
									.trim();

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row6
							// row6

							if (execStat) {
								runStat.updateStatOnConnection("row6"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row8"
							// /////////////////////////////////////////////

							boolean forceLooprow8 = false;

							row8Struct row8ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row8HashKey.AdressId = row6.address_id;

								row8HashKey.hashCodeDirty = true;

								tHash_Lookup_row8.lookup(row8HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row8 != null
									&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																						// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.AdressId = '"
								// + row8HashKey.AdressId + "'");
							} // G 071

							row8Struct row8 = null;

							row8Struct fromLookup_row8 = null;
							row8 = row8Default;

							if (tHash_Lookup_row8 != null
									&& tHash_Lookup_row8.hasNext()) { // G 099

								fromLookup_row8 = tHash_Lookup_row8.next();

							} // G 099

							if (fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								out = null;

								// # Output table : 'out'
								out_tmp.Stra_e = row6.Stra_e;
								out_tmp.PLZ = row6.PLZ;
								out_tmp.Ort = row6.Ort;
								out_tmp.Land = row6.Land;
								out_tmp.KundenId = row8.KundenId;
								out_tmp.IBAN = row8.IBAN;
								out_tmp.Einkommen = row8.Einkommen;
								out_tmp.Kreditlimit = row8.Kreditlimit;
								out_tmp.Score = row8.Score;
								out_tmp.Vorname = row8.Vorname;
								out_tmp.Nachname = row8.Nachname;
								out_tmp.Telefon = row8.Telefon;
								out_tmp.E_Mail = row8.E_Mail;
								out_tmp.Geburtsdatum = row8.Geburtsdatum;
								out_tmp.Geschlecht = row8.Geschlecht;
								out_tmp.AdressId = row8.AdressId;
								out = out_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
							// Start of branch "out"
							if (out != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								// out
								// out

								if (execStat) {
									runStat.updateStatOnConnection("out"
											+ iterateId, 1, 1);
								}

								// outer
								// out

								// ////////

								// for output
								tHashInput_tUnite_1_row9 = new tHashInput_tUnite_1_row9Struct();

								tHashInput_tUnite_1_row9.Stra_e = out.Stra_e;
								tHashInput_tUnite_1_row9.PLZ = out.PLZ;
								tHashInput_tUnite_1_row9.Ort = out.Ort;
								tHashInput_tUnite_1_row9.Land = out.Land;
								tHashInput_tUnite_1_row9.KundenId = out.KundenId;
								tHashInput_tUnite_1_row9.IBAN = out.IBAN;
								tHashInput_tUnite_1_row9.Einkommen = out.Einkommen;
								tHashInput_tUnite_1_row9.Kreditlimit = out.Kreditlimit;
								tHashInput_tUnite_1_row9.Score = out.Score;
								tHashInput_tUnite_1_row9.Vorname = out.Vorname;
								tHashInput_tUnite_1_row9.Nachname = out.Nachname;
								tHashInput_tUnite_1_row9.Telefon = out.Telefon;
								tHashInput_tUnite_1_row9.E_Mail = out.E_Mail;
								tHashInput_tUnite_1_row9.Geburtsdatum = out.Geburtsdatum;
								tHashInput_tUnite_1_row9.Geschlecht = out.Geschlecht;
								tHashInput_tUnite_1_row9.AdressId = out.AdressId;

								nb_line_tUnite_1++;

								// ////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_1 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_1";

								// tHashInput_tUnite_1_tHashInput_tUnite_1_row9
								// tHashInput_tUnite_1_row9

								if (execStat) {
									runStat.updateStatOnConnection(
											"tHashInput_tUnite_1_tHashInput_tUnite_1_row9"
													+ iterateId, 1, 1);
								}

								tHashInput_tUnite_1_row9Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row9Struct();

								oneRow_tHashOutput_tUnite_1.Stra_e = tHashInput_tUnite_1_row9.Stra_e;
								oneRow_tHashOutput_tUnite_1.PLZ = tHashInput_tUnite_1_row9.PLZ;
								oneRow_tHashOutput_tUnite_1.Ort = tHashInput_tUnite_1_row9.Ort;
								oneRow_tHashOutput_tUnite_1.Land = tHashInput_tUnite_1_row9.Land;
								oneRow_tHashOutput_tUnite_1.KundenId = tHashInput_tUnite_1_row9.KundenId;
								oneRow_tHashOutput_tUnite_1.IBAN = tHashInput_tUnite_1_row9.IBAN;
								oneRow_tHashOutput_tUnite_1.Einkommen = tHashInput_tUnite_1_row9.Einkommen;
								oneRow_tHashOutput_tUnite_1.Kreditlimit = tHashInput_tUnite_1_row9.Kreditlimit;
								oneRow_tHashOutput_tUnite_1.Score = tHashInput_tUnite_1_row9.Score;
								oneRow_tHashOutput_tUnite_1.Vorname = tHashInput_tUnite_1_row9.Vorname;
								oneRow_tHashOutput_tUnite_1.Nachname = tHashInput_tUnite_1_row9.Nachname;
								oneRow_tHashOutput_tUnite_1.Telefon = tHashInput_tUnite_1_row9.Telefon;
								oneRow_tHashOutput_tUnite_1.E_Mail = tHashInput_tUnite_1_row9.E_Mail;
								oneRow_tHashOutput_tUnite_1.Geburtsdatum = tHashInput_tUnite_1_row9.Geburtsdatum;
								oneRow_tHashOutput_tUnite_1.Geschlecht = tHashInput_tUnite_1_row9.Geschlecht;
								oneRow_tHashOutput_tUnite_1.AdressId = tHashInput_tUnite_1_row9.AdressId;

								tHashFile_tHashOutput_tUnite_1
										.put(oneRow_tHashOutput_tUnite_1);
								nb_line_tHashOutput_tUnite_1++;

								tos_count_tHashOutput_tUnite_1++;

								/**
								 * [tHashOutput_tUnite_1 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_1 process_data_begin ]
								 * start
								 */

								currentComponent = "tHashOutput_tUnite_1";

								/**
								 * [tHashOutput_tUnite_1 process_data_begin ]
								 * stop
								 */

								/**
								 * [tHashOutput_tUnite_1 process_data_end ]
								 * start
								 */

								currentComponent = "tHashOutput_tUnite_1";

								/**
								 * [tHashOutput_tUnite_1 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "out"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Addresses.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = null;

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outerStruct outer_tmp = new outerStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tJoin_1 begin ] start
				 */

				ok_Hash.put("tJoin_1", false);
				start_Hash.put("tJoin_1", System.currentTimeMillis());

				currentComponent = "tJoin_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJoin_1 = 0;

				final java.util.Map<row2Struct, row2Struct> tHash_tJoin_1 = (java.util.Map<row2Struct, row2Struct>) globalMap
						.get("tHash_row2");

				class Util_tJoin_1 {
					row2Struct lookupValue = null;
					row2Struct row2HashKey = new row2Struct();

					public boolean isJoined(row1Struct mainRow) {
						row2HashKey.KundenId = mainRow.Kunden_ID;

						row2HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_1.get(row2HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

				int nb_line_tJoin_1 = 0;

				/**
				 * [tJoin_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Accounts.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Accounts.csv",
								"US-ASCII", "|", "\n", false, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Kunden_ID = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Kunden_ID",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Kunden_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.IBAN = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Einkommen = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Einkommen",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Einkommen = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Kreditlimit = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Kreditlimit",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Kreditlimit = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Score = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Score", "row1",
															temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Score = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tJoin_1 main ] start
							 */

							currentComponent = "tJoin_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							row3 = null;

							row3 = new row3Struct();
							row3.KundenId = row1.Kunden_ID;
							row3.IBAN = row1.IBAN;
							row3.Einkommen = row1.Einkommen;
							row3.Kreditlimit = row1.Kreditlimit;
							row3.Score = row1.Score;

							if (util_tJoin_1.isJoined(row1)) {
								row3.Vorname = util_tJoin_1.lookupValue.Vorname;
								row3.Nachname = util_tJoin_1.lookupValue.Nachname;
								row3.Telefon = util_tJoin_1.lookupValue.Telefon;
								row3.E_Mail = util_tJoin_1.lookupValue.E_Mail;
								row3.Geburtsdatum = util_tJoin_1.lookupValue.Geburtsdatum;
								row3.Geschlecht = util_tJoin_1.lookupValue.Geschlecht;
								row3.AdressId = util_tJoin_1.lookupValue.AdressId;
							}

							// /////////////////////

							tos_count_tJoin_1++;

							/**
							 * [tJoin_1 main ] stop
							 */

							/**
							 * [tJoin_1 process_data_begin ] start
							 */

							currentComponent = "tJoin_1";

							/**
							 * [tJoin_1 process_data_begin ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3"
											+ iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row4"
								// /////////////////////////////////////////////

								boolean forceLooprow4 = false;

								row4Struct row4ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row4HashKey.address_id = row3.AdressId;

									row4HashKey.hashCodeDirty = true;

									tFileInputDelimited_6Process(globalMap);

									tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
											.get("tHash_Lookup_row4"));

									tHash_Lookup_row4.initGet();

									tHash_Lookup_row4.lookup(row4HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row4 != null
										&& tHash_Lookup_row4
												.getCount(row4HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.address_id = '"
									// + row4HashKey.address_id + "'");
								} // G 071

								row4Struct row4 = null;

								row4Struct fromLookup_row4 = null;
								row4 = row4Default;

								if (tHash_Lookup_row4 != null
										&& tHash_Lookup_row4.hasNext()) { // G
																			// 099

									fromLookup_row4 = tHash_Lookup_row4.next();

								} // G 099

								if (fromLookup_row4 != null) {
									row4 = fromLookup_row4;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									outer = null;

									// # Output table : 'outer'
									outer_tmp.Stra_e = row4.Stra_e;
									outer_tmp.PLZ = row4.PLZ;
									outer_tmp.Ort = row4.Ort;
									outer_tmp.Land = row4.Land;
									outer_tmp.KundenId = row3.KundenId;
									outer_tmp.IBAN = row3.IBAN;
									outer_tmp.Einkommen = row3.Einkommen;
									outer_tmp.Kreditlimit = row3.Kreditlimit;
									outer_tmp.Score = row3.Score;
									outer_tmp.Vorname = row3.Vorname;
									outer_tmp.Nachname = row3.Nachname;
									outer_tmp.Telefon = row3.Telefon;
									outer_tmp.E_Mail = row3.E_Mail;
									outer_tmp.Geburtsdatum = row3.Geburtsdatum;
									outer_tmp.Geschlecht = row3.Geschlecht;
									outer_tmp.AdressId = row3.AdressId;
									outer = outer_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */

								/**
								 * [tMap_2 process_data_begin ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_begin ] stop
								 */
								// Start of branch "outer"
								if (outer != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									// out
									// outer

									// outer
									// outer

									if (execStat) {
										runStat.updateStatOnConnection("outer"
												+ iterateId, 1, 1);
									}

									// ////////

									// for output
									tHashInput_tUnite_1_row9 = new tHashInput_tUnite_1_row9Struct();

									tHashInput_tUnite_1_row9.Stra_e = outer.Stra_e;
									tHashInput_tUnite_1_row9.PLZ = outer.PLZ;
									tHashInput_tUnite_1_row9.Ort = outer.Ort;
									tHashInput_tUnite_1_row9.Land = outer.Land;
									tHashInput_tUnite_1_row9.KundenId = outer.KundenId;
									tHashInput_tUnite_1_row9.IBAN = outer.IBAN;
									tHashInput_tUnite_1_row9.Einkommen = outer.Einkommen;
									tHashInput_tUnite_1_row9.Kreditlimit = outer.Kreditlimit;
									tHashInput_tUnite_1_row9.Score = outer.Score;
									tHashInput_tUnite_1_row9.Vorname = outer.Vorname;
									tHashInput_tUnite_1_row9.Nachname = outer.Nachname;
									tHashInput_tUnite_1_row9.Telefon = outer.Telefon;
									tHashInput_tUnite_1_row9.E_Mail = outer.E_Mail;
									tHashInput_tUnite_1_row9.Geburtsdatum = outer.Geburtsdatum;
									tHashInput_tUnite_1_row9.Geschlecht = outer.Geschlecht;
									tHashInput_tUnite_1_row9.AdressId = outer.AdressId;

									nb_line_tUnite_1++;

									// ////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tHashOutput_tUnite_1 main ] start
									 */

									currentComponent = "tHashOutput_tUnite_1";

									// tHashInput_tUnite_1_tHashInput_tUnite_1_row9
									// tHashInput_tUnite_1_row9

									if (execStat) {
										runStat.updateStatOnConnection(
												"tHashInput_tUnite_1_tHashInput_tUnite_1_row9"
														+ iterateId, 1, 1);
									}

									tHashInput_tUnite_1_row9Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row9Struct();

									oneRow_tHashOutput_tUnite_1.Stra_e = tHashInput_tUnite_1_row9.Stra_e;
									oneRow_tHashOutput_tUnite_1.PLZ = tHashInput_tUnite_1_row9.PLZ;
									oneRow_tHashOutput_tUnite_1.Ort = tHashInput_tUnite_1_row9.Ort;
									oneRow_tHashOutput_tUnite_1.Land = tHashInput_tUnite_1_row9.Land;
									oneRow_tHashOutput_tUnite_1.KundenId = tHashInput_tUnite_1_row9.KundenId;
									oneRow_tHashOutput_tUnite_1.IBAN = tHashInput_tUnite_1_row9.IBAN;
									oneRow_tHashOutput_tUnite_1.Einkommen = tHashInput_tUnite_1_row9.Einkommen;
									oneRow_tHashOutput_tUnite_1.Kreditlimit = tHashInput_tUnite_1_row9.Kreditlimit;
									oneRow_tHashOutput_tUnite_1.Score = tHashInput_tUnite_1_row9.Score;
									oneRow_tHashOutput_tUnite_1.Vorname = tHashInput_tUnite_1_row9.Vorname;
									oneRow_tHashOutput_tUnite_1.Nachname = tHashInput_tUnite_1_row9.Nachname;
									oneRow_tHashOutput_tUnite_1.Telefon = tHashInput_tUnite_1_row9.Telefon;
									oneRow_tHashOutput_tUnite_1.E_Mail = tHashInput_tUnite_1_row9.E_Mail;
									oneRow_tHashOutput_tUnite_1.Geburtsdatum = tHashInput_tUnite_1_row9.Geburtsdatum;
									oneRow_tHashOutput_tUnite_1.Geschlecht = tHashInput_tUnite_1_row9.Geschlecht;
									oneRow_tHashOutput_tUnite_1.AdressId = tHashInput_tUnite_1_row9.AdressId;

									tHashFile_tHashOutput_tUnite_1
											.put(oneRow_tHashOutput_tUnite_1);
									nb_line_tHashOutput_tUnite_1++;

									tos_count_tHashOutput_tUnite_1++;

									/**
									 * [tHashOutput_tUnite_1 main ] stop
									 */

									/**
									 * [tHashOutput_tUnite_1 process_data_begin
									 * ] start
									 */

									currentComponent = "tHashOutput_tUnite_1";

									/**
									 * [tHashOutput_tUnite_1 process_data_begin
									 * ] stop
									 */

									/**
									 * [tHashOutput_tUnite_1 process_data_end ]
									 * start
									 */

									currentComponent = "tHashOutput_tUnite_1";

									/**
									 * [tHashOutput_tUnite_1 process_data_end ]
									 * stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "outer"

								/**
								 * [tMap_2 process_data_end ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tJoin_1 process_data_end ] start
							 */

							currentComponent = "tJoin_1";

							/**
							 * [tJoin_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Accounts.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJoin_1 end ] start
				 */

				currentComponent = "tJoin_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJoin_1", true);
				end_Hash.put("tJoin_1", System.currentTimeMillis());

				/**
				 * [tJoin_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out" + iterateId, 2, 0);
					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("outer" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_1 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_1";

				globalMap.put("tHashOutput_tUnite_1_NB_LINE",
						nb_line_tHashOutput_tUnite_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"tHashInput_tUnite_1_tHashInput_tUnite_1_row9"
										+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tHashOutput_tUnite_1", true);
				end_Hash.put("tHashOutput_tUnite_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tJoin_1"
			globalMap.remove("tHash_row2");

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tJoin_1 finally ] start
				 */

				currentComponent = "tJoin_1";

				/**
				 * [tJoin_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tHashOutput_tUnite_1 finally ] start
				 */

				currentComponent = "tHashOutput_tUnite_1";

				/**
				 * [tHashOutput_tUnite_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String address_id;

		public String getAddress_id() {
			return this.address_id;
		}

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.address_id == null) ? 0 : this.address_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.address_id == null) {
				if (other.address_id != null)
					return false;

			} else if (!this.address_id.equals(other.address_id))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.address_id = this.address_id;
			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.address_id = this.address_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.address_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.address_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Stra_e = readString(dis, ois);

				this.PLZ = readString(dis, ois);

				this.Ort = readString(dis, ois);

				this.Land = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Stra_e, dos, oos);

				writeString(this.PLZ, dos, oos);

				writeString(this.Ort, dos, oos);

				writeString(this.Land, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("address_id=" + address_id);
			sb.append(",Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.address_id,
					other.address_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tFileInputDelimited_6 - inputs:()
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 -
				// inputs:(row4) outputs:()
				// linked node: tMap_2 - inputs:(row3,row4) outputs:(outer)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				try {

					Object filename_tFileInputDelimited_6 = "C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Addresses.csv";
					if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
						if (footer_value_tFileInputDelimited_6 > 0
								|| random_value_tFileInputDelimited_6 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Addresses.csv",
								"UTF-8", ";", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_6 != null
							&& fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();

						row4 = null;

						row4 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_6 = 0;

							columnIndexWithD_tFileInputDelimited_6 = 0;

							row4.address_id = fid_tFileInputDelimited_6.get(
									columnIndexWithD_tFileInputDelimited_6)
									.trim();

							columnIndexWithD_tFileInputDelimited_6 = 1;

							row4.Stra_e = fid_tFileInputDelimited_6.get(
									columnIndexWithD_tFileInputDelimited_6)
									.trim();

							columnIndexWithD_tFileInputDelimited_6 = 2;

							row4.PLZ = fid_tFileInputDelimited_6.get(
									columnIndexWithD_tFileInputDelimited_6)
									.trim();

							columnIndexWithD_tFileInputDelimited_6 = 3;

							row4.Ort = fid_tFileInputDelimited_6.get(
									columnIndexWithD_tFileInputDelimited_6)
									.trim();

							columnIndexWithD_tFileInputDelimited_6 = 4;

							row4.Land = fid_tFileInputDelimited_6.get(
									columnIndexWithD_tFileInputDelimited_6)
									.trim();

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */

						/**
						 * [tFileInputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_begin ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tAdvancedHash_row4 main ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 1, 1);
							}

							row4Struct row4_HashRow = new row4Struct();

							row4_HashRow.address_id = row4.address_id;

							row4_HashRow.Stra_e = row4.Stra_e;

							row4_HashRow.PLZ = row4.PLZ;

							row4_HashRow.Ort = row4.Ort;

							row4_HashRow.Land = row4.Land;

							tHash_Lookup_row4.put(row4_HashRow);

							tos_count_tAdvancedHash_row4++;

							/**
							 * [tAdvancedHash_row4 main ] stop
							 */

							/**
							 * [tAdvancedHash_row4 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							/**
							 * [tAdvancedHash_row4 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row4 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							/**
							 * [tAdvancedHash_row4 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

					}
				} finally {
					if (!((Object) ("C:/Users/Student/Documents/Uni/SS19/AvG/A2/A2 Daten/ETL/Addresses.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								fid_tFileInputDelimited_6.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_2_row12Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_2_row12Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		public String Geburtsort;

		public String getGeburtsort() {
			return this.Geburtsort;
		}

		public Integer loyalityScore;

		public Integer getLoyalityScore() {
			return this.loyalityScore;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tHashInput_tUnite_2_row12Struct other = (tHashInput_tUnite_2_row12Struct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(tHashInput_tUnite_2_row12Struct other) {

			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;
			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;
			other.Geburtsort = this.Geburtsort;
			other.loyalityScore = this.loyalityScore;

		}

		public void copyKeysDataTo(tHashInput_tUnite_2_row12Struct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readString(dis);

					this.AdressId = readString(dis);

					this.Geburtsort = readString(dis);

					this.loyalityScore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// String

				writeString(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

				// String

				writeString(this.Geburtsort, dos);

				// Integer

				writeInteger(this.loyalityScore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append(",Geburtsort=" + Geburtsort);
			sb.append(",loyalityScore=" + String.valueOf(loyalityScore));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_2_row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class LastJoinStruct implements
			routines.system.IPersistableRow<LastJoinStruct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		public String Geburtsort;

		public String getGeburtsort() {
			return this.Geburtsort;
		}

		public Integer loyalityScore;

		public Integer getLoyalityScore() {
			return this.loyalityScore;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final LastJoinStruct other = (LastJoinStruct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(LastJoinStruct other) {

			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;
			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;
			other.Geburtsort = this.Geburtsort;
			other.loyalityScore = this.loyalityScore;

		}

		public void copyKeysDataTo(LastJoinStruct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readString(dis);

					this.AdressId = readString(dis);

					this.Geburtsort = readString(dis);

					this.loyalityScore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// String

				writeString(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

				// String

				writeString(this.Geburtsort, dos);

				// Integer

				writeInteger(this.loyalityScore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append(",Geburtsort=" + Geburtsort);
			sb.append(",loyalityScore=" + String.valueOf(loyalityScore));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LastJoinStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readString(dis);

					this.AdressId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// String

				writeString(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;
			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readString(dis);

					this.AdressId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// String

				writeString(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_1_RunAfterStruct implements
			routines.system.IPersistableRow<tHashInput_tUnite_1_RunAfterStruct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_1_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		public String Geburtsort;

		public String getGeburtsort() {
			return this.Geburtsort;
		}

		public Integer loyalityScore;

		public Integer getLoyalityScore() {
			return this.loyalityScore;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;
			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;
			other.Geburtsort = this.Geburtsort;
			other.loyalityScore = this.loyalityScore;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readString(dis);

					this.AdressId = readString(dis);

					this.Geburtsort = readString(dis);

					this.loyalityScore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// String

				writeString(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

				// String

				writeString(this.Geburtsort, dos);

				// Integer

				writeInteger(this.loyalityScore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append(",Geburtsort=" + Geburtsort);
			sb.append(",loyalityScore=" + String.valueOf(loyalityScore));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public String Clients;

		public String getClients() {
			return this.Clients;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Clients = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Clients, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Clients=" + Clients);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_tUnite_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_5Process(globalMap);

				row9Struct row9 = new row9Struct();
				row11Struct row11 = new row11Struct();
				LastJoinStruct LastJoin = new LastJoinStruct();

				row10Struct row10 = new row10Struct();
				row13Struct row13 = new row13Struct();

				tHashInput_tUnite_2_row12Struct tHashInput_tUnite_2_row12 = new tHashInput_tUnite_2_row12Struct();

				/**
				 * [tHashOutput_tUnite_2 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_2", false);
				start_Hash.put("tHashOutput_tUnite_2",
						System.currentTimeMillis());

				currentComponent = "tHashOutput_tUnite_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"tHashInput_tUnite_2_tHashInput_tUnite_2_row12"
										+ iterateId, 0, 0);

					}
				}

				int tos_count_tHashOutput_tUnite_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_2_row12Struct> tHashFile_tHashOutput_tUnite_2 = null;
				String hashKey_tHashOutput_tUnite_2 = "tHashFile_Unifying_Data_JSON_"
						+ pid + "_tHashOutput_tUnite_2";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_tUnite_2)) {
					if (mf_tHashOutput_tUnite_2.getResourceMap().get(
							hashKey_tHashOutput_tUnite_2) == null) {
						mf_tHashOutput_tUnite_2
								.getResourceMap()
								.put(hashKey_tHashOutput_tUnite_2,
										new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_2_row12Struct>(
												org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_tUnite_2 = mf_tHashOutput_tUnite_2
								.getResourceMap().get(
										hashKey_tHashOutput_tUnite_2);
					} else {
						tHashFile_tHashOutput_tUnite_2 = mf_tHashOutput_tUnite_2
								.getResourceMap().get(
										hashKey_tHashOutput_tUnite_2);
					}
				}
				int nb_line_tHashOutput_tUnite_2 = 0;

				/**
				 * [tHashOutput_tUnite_2 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("LastJoin" + iterateId,
								0, 0);

					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row13" + iterateId, 0,
								0);

					}
				}

				int tos_count_tUnite_2 = 0;

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				LastJoinStruct LastJoin_tmp = new LastJoinStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Stra_e;
					String PLZ;
					String Ort;
					String Land;
					Integer KundenId;
					String IBAN;
					Float Einkommen;
					Float Kreditlimit;
					Integer Score;
					String Vorname;
					String Nachname;
					String Telefon;
					String E_Mail;
					String Geburtsdatum;
					String Geschlecht;
					String AdressId;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.Stra_e == null) ? 0 : this.Stra_e
											.hashCode());

							result = prime
									* result
									+ ((this.PLZ == null) ? 0 : this.PLZ
											.hashCode());

							result = prime
									* result
									+ ((this.Ort == null) ? 0 : this.Ort
											.hashCode());

							result = prime
									* result
									+ ((this.Land == null) ? 0 : this.Land
											.hashCode());

							result = prime
									* result
									+ ((this.KundenId == null) ? 0
											: this.KundenId.hashCode());

							result = prime
									* result
									+ ((this.IBAN == null) ? 0 : this.IBAN
											.hashCode());

							result = prime
									* result
									+ ((this.Einkommen == null) ? 0
											: this.Einkommen.hashCode());

							result = prime
									* result
									+ ((this.Kreditlimit == null) ? 0
											: this.Kreditlimit.hashCode());

							result = prime
									* result
									+ ((this.Score == null) ? 0 : this.Score
											.hashCode());

							result = prime
									* result
									+ ((this.Vorname == null) ? 0
											: this.Vorname.hashCode());

							result = prime
									* result
									+ ((this.Nachname == null) ? 0
											: this.Nachname.hashCode());

							result = prime
									* result
									+ ((this.Telefon == null) ? 0
											: this.Telefon.hashCode());

							result = prime
									* result
									+ ((this.E_Mail == null) ? 0 : this.E_Mail
											.hashCode());

							result = prime
									* result
									+ ((this.Geburtsdatum == null) ? 0
											: this.Geburtsdatum.hashCode());

							result = prime
									* result
									+ ((this.Geschlecht == null) ? 0
											: this.Geschlecht.hashCode());

							result = prime
									* result
									+ ((this.AdressId == null) ? 0
											: this.AdressId.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.Stra_e == null) {
							if (other.Stra_e != null)
								return false;

						} else if (!this.Stra_e.equals(other.Stra_e))

							return false;

						if (this.PLZ == null) {
							if (other.PLZ != null)
								return false;

						} else if (!this.PLZ.equals(other.PLZ))

							return false;

						if (this.Ort == null) {
							if (other.Ort != null)
								return false;

						} else if (!this.Ort.equals(other.Ort))

							return false;

						if (this.Land == null) {
							if (other.Land != null)
								return false;

						} else if (!this.Land.equals(other.Land))

							return false;

						if (this.KundenId == null) {
							if (other.KundenId != null)
								return false;

						} else if (!this.KundenId.equals(other.KundenId))

							return false;

						if (this.IBAN == null) {
							if (other.IBAN != null)
								return false;

						} else if (!this.IBAN.equals(other.IBAN))

							return false;

						if (this.Einkommen == null) {
							if (other.Einkommen != null)
								return false;

						} else if (!this.Einkommen.equals(other.Einkommen))

							return false;

						if (this.Kreditlimit == null) {
							if (other.Kreditlimit != null)
								return false;

						} else if (!this.Kreditlimit.equals(other.Kreditlimit))

							return false;

						if (this.Score == null) {
							if (other.Score != null)
								return false;

						} else if (!this.Score.equals(other.Score))

							return false;

						if (this.Vorname == null) {
							if (other.Vorname != null)
								return false;

						} else if (!this.Vorname.equals(other.Vorname))

							return false;

						if (this.Nachname == null) {
							if (other.Nachname != null)
								return false;

						} else if (!this.Nachname.equals(other.Nachname))

							return false;

						if (this.Telefon == null) {
							if (other.Telefon != null)
								return false;

						} else if (!this.Telefon.equals(other.Telefon))

							return false;

						if (this.E_Mail == null) {
							if (other.E_Mail != null)
								return false;

						} else if (!this.E_Mail.equals(other.E_Mail))

							return false;

						if (this.Geburtsdatum == null) {
							if (other.Geburtsdatum != null)
								return false;

						} else if (!this.Geburtsdatum
								.equals(other.Geburtsdatum))

							return false;

						if (this.Geschlecht == null) {
							if (other.Geschlecht != null)
								return false;

						} else if (!this.Geschlecht.equals(other.Geschlecht))

							return false;

						if (this.AdressId == null) {
							if (other.AdressId != null)
								return false;

						} else if (!this.AdressId.equals(other.AdressId))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_1 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_1", false);
				start_Hash.put("tHashInput_tUnite_1",
						System.currentTimeMillis());

				currentComponent = "tHashInput_tUnite_1";

				int tos_count_tHashInput_tUnite_1 = 0;

				int nb_line_tHashInput_tUnite_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row9Struct> tHashFile_tHashInput_tUnite_1 = mf_tHashInput_tUnite_1
						.getAdvancedMemoryHashFile("tHashFile_Unifying_Data_JSON_"
								+ pid + "_tHashOutput_tUnite_1");
				if (tHashFile_tHashInput_tUnite_1 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_1_row9Struct> iterator_tHashInput_tUnite_1 = tHashFile_tHashInput_tUnite_1
						.iterator();
				while (iterator_tHashInput_tUnite_1.hasNext()) {
					tHashInput_tUnite_1_row9Struct next_tHashInput_tUnite_1 = iterator_tHashInput_tUnite_1
							.next();

					row9.Stra_e = next_tHashInput_tUnite_1.Stra_e;
					row9.PLZ = next_tHashInput_tUnite_1.PLZ;
					row9.Ort = next_tHashInput_tUnite_1.Ort;
					row9.Land = next_tHashInput_tUnite_1.Land;
					row9.KundenId = next_tHashInput_tUnite_1.KundenId;
					row9.IBAN = next_tHashInput_tUnite_1.IBAN;
					row9.Einkommen = next_tHashInput_tUnite_1.Einkommen;
					row9.Kreditlimit = next_tHashInput_tUnite_1.Kreditlimit;
					row9.Score = next_tHashInput_tUnite_1.Score;
					row9.Vorname = next_tHashInput_tUnite_1.Vorname;
					row9.Nachname = next_tHashInput_tUnite_1.Nachname;
					row9.Telefon = next_tHashInput_tUnite_1.Telefon;
					row9.E_Mail = next_tHashInput_tUnite_1.E_Mail;
					row9.Geburtsdatum = next_tHashInput_tUnite_1.Geburtsdatum;
					row9.Geschlecht = next_tHashInput_tUnite_1.Geschlecht;
					row9.AdressId = next_tHashInput_tUnite_1.AdressId;

					/**
					 * [tHashInput_tUnite_1 begin ] stop
					 */

					/**
					 * [tHashInput_tUnite_1 main ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					tos_count_tHashInput_tUnite_1++;

					/**
					 * [tHashInput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_1 process_data_begin ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					/**
					 * [tHashInput_tUnite_1 process_data_begin ] stop
					 */

					/**
					 * [tUniqRow_1 main ] start
					 */

					currentComponent = "tUniqRow_1";

					// row9
					// row9

					if (execStat) {
						runStat.updateStatOnConnection("row9" + iterateId, 1, 1);
					}

					row11 = null;
					finder_tUniqRow_1.Stra_e = row9.Stra_e;
					finder_tUniqRow_1.PLZ = row9.PLZ;
					finder_tUniqRow_1.Ort = row9.Ort;
					finder_tUniqRow_1.Land = row9.Land;
					finder_tUniqRow_1.KundenId = row9.KundenId;
					finder_tUniqRow_1.IBAN = row9.IBAN;
					finder_tUniqRow_1.Einkommen = row9.Einkommen;
					finder_tUniqRow_1.Kreditlimit = row9.Kreditlimit;
					finder_tUniqRow_1.Score = row9.Score;
					finder_tUniqRow_1.Vorname = row9.Vorname;
					finder_tUniqRow_1.Nachname = row9.Nachname;
					finder_tUniqRow_1.Telefon = row9.Telefon;
					finder_tUniqRow_1.E_Mail = row9.E_Mail;
					finder_tUniqRow_1.Geburtsdatum = row9.Geburtsdatum;
					finder_tUniqRow_1.Geschlecht = row9.Geschlecht;
					finder_tUniqRow_1.AdressId = row9.AdressId;
					finder_tUniqRow_1.hashCodeDirty = true;
					if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
						KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

						new_tUniqRow_1.Stra_e = row9.Stra_e;
						new_tUniqRow_1.PLZ = row9.PLZ;
						new_tUniqRow_1.Ort = row9.Ort;
						new_tUniqRow_1.Land = row9.Land;
						new_tUniqRow_1.KundenId = row9.KundenId;
						new_tUniqRow_1.IBAN = row9.IBAN;
						new_tUniqRow_1.Einkommen = row9.Einkommen;
						new_tUniqRow_1.Kreditlimit = row9.Kreditlimit;
						new_tUniqRow_1.Score = row9.Score;
						new_tUniqRow_1.Vorname = row9.Vorname;
						new_tUniqRow_1.Nachname = row9.Nachname;
						new_tUniqRow_1.Telefon = row9.Telefon;
						new_tUniqRow_1.E_Mail = row9.E_Mail;
						new_tUniqRow_1.Geburtsdatum = row9.Geburtsdatum;
						new_tUniqRow_1.Geschlecht = row9.Geschlecht;
						new_tUniqRow_1.AdressId = row9.AdressId;

						keystUniqRow_1.add(new_tUniqRow_1);
						if (row11 == null) {

							row11 = new row11Struct();
						}
						row11.Stra_e = row9.Stra_e;
						row11.PLZ = row9.PLZ;
						row11.Ort = row9.Ort;
						row11.Land = row9.Land;
						row11.KundenId = row9.KundenId;
						row11.IBAN = row9.IBAN;
						row11.Einkommen = row9.Einkommen;
						row11.Kreditlimit = row9.Kreditlimit;
						row11.Score = row9.Score;
						row11.Vorname = row9.Vorname;
						row11.Nachname = row9.Nachname;
						row11.Telefon = row9.Telefon;
						row11.E_Mail = row9.E_Mail;
						row11.Geburtsdatum = row9.Geburtsdatum;
						row11.Geschlecht = row9.Geschlecht;
						row11.AdressId = row9.AdressId;
						nb_uniques_tUniqRow_1++;
					} else {
						nb_duplicates_tUniqRow_1++;
					}

					tos_count_tUniqRow_1++;

					/**
					 * [tUniqRow_1 main ] stop
					 */

					/**
					 * [tUniqRow_1 process_data_begin ] start
					 */

					currentComponent = "tUniqRow_1";

					/**
					 * [tUniqRow_1 process_data_begin ] stop
					 */
					// Start of branch "row11"
					if (row11 != null) {

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						// row11
						// row11

						if (execStat) {
							runStat.updateStatOnConnection("row11" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							LastJoin = null;

							// # Output table : 'LastJoin'
							LastJoin_tmp.Stra_e = row11.Stra_e;
							LastJoin_tmp.PLZ = row11.PLZ;
							LastJoin_tmp.Ort = row11.Ort;
							LastJoin_tmp.Land = row11.Land;
							LastJoin_tmp.KundenId = row11.KundenId;
							LastJoin_tmp.IBAN = row11.IBAN;
							LastJoin_tmp.Einkommen = row11.Einkommen;
							LastJoin_tmp.Kreditlimit = row11.Kreditlimit;
							LastJoin_tmp.Score = row11.Score;
							LastJoin_tmp.Vorname = row11.Vorname;
							LastJoin_tmp.Nachname = row11.Nachname;
							LastJoin_tmp.Telefon = row11.Telefon;
							LastJoin_tmp.E_Mail = row11.E_Mail;
							LastJoin_tmp.Geburtsdatum = row11.Geburtsdatum;
							LastJoin_tmp.Geschlecht = String
									.valueOf(row11.Geschlecht);
							LastJoin_tmp.AdressId = row11.AdressId;
							LastJoin_tmp.Geburtsort = null;
							LastJoin_tmp.loyalityScore = null;
							LastJoin = LastJoin_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */

						/**
						 * [tMap_4 process_data_begin ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_begin ] stop
						 */
						// Start of branch "LastJoin"
						if (LastJoin != null) {

							/**
							 * [tUnite_2 main ] start
							 */

							currentComponent = "tUnite_2";

							// LastJoin
							// LastJoin

							if (execStat) {
								runStat.updateStatOnConnection("LastJoin"
										+ iterateId, 1, 1);
							}

							// row13
							// LastJoin

							// ////////

							// for output
							tHashInput_tUnite_2_row12 = new tHashInput_tUnite_2_row12Struct();

							tHashInput_tUnite_2_row12.Stra_e = LastJoin.Stra_e;
							tHashInput_tUnite_2_row12.PLZ = LastJoin.PLZ;
							tHashInput_tUnite_2_row12.Ort = LastJoin.Ort;
							tHashInput_tUnite_2_row12.Land = LastJoin.Land;
							tHashInput_tUnite_2_row12.KundenId = LastJoin.KundenId;
							tHashInput_tUnite_2_row12.IBAN = LastJoin.IBAN;
							tHashInput_tUnite_2_row12.Einkommen = LastJoin.Einkommen;
							tHashInput_tUnite_2_row12.Kreditlimit = LastJoin.Kreditlimit;
							tHashInput_tUnite_2_row12.Score = LastJoin.Score;
							tHashInput_tUnite_2_row12.Vorname = LastJoin.Vorname;
							tHashInput_tUnite_2_row12.Nachname = LastJoin.Nachname;
							tHashInput_tUnite_2_row12.Telefon = LastJoin.Telefon;
							tHashInput_tUnite_2_row12.E_Mail = LastJoin.E_Mail;
							tHashInput_tUnite_2_row12.Geburtsdatum = LastJoin.Geburtsdatum;
							tHashInput_tUnite_2_row12.Geschlecht = LastJoin.Geschlecht;
							tHashInput_tUnite_2_row12.AdressId = LastJoin.AdressId;
							tHashInput_tUnite_2_row12.Geburtsort = LastJoin.Geburtsort;
							tHashInput_tUnite_2_row12.loyalityScore = LastJoin.loyalityScore;

							nb_line_tUnite_2++;

							// ////////

							tos_count_tUnite_2++;

							/**
							 * [tUnite_2 main ] stop
							 */

							/**
							 * [tUnite_2 process_data_begin ] start
							 */

							currentComponent = "tUnite_2";

							/**
							 * [tUnite_2 process_data_begin ] stop
							 */

							/**
							 * [tHashOutput_tUnite_2 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_2";

							// tHashInput_tUnite_2_tHashInput_tUnite_2_row12
							// tHashInput_tUnite_2_row12

							if (execStat) {
								runStat.updateStatOnConnection(
										"tHashInput_tUnite_2_tHashInput_tUnite_2_row12"
												+ iterateId, 1, 1);
							}

							tHashInput_tUnite_2_row12Struct oneRow_tHashOutput_tUnite_2 = new tHashInput_tUnite_2_row12Struct();

							oneRow_tHashOutput_tUnite_2.Stra_e = tHashInput_tUnite_2_row12.Stra_e;
							oneRow_tHashOutput_tUnite_2.PLZ = tHashInput_tUnite_2_row12.PLZ;
							oneRow_tHashOutput_tUnite_2.Ort = tHashInput_tUnite_2_row12.Ort;
							oneRow_tHashOutput_tUnite_2.Land = tHashInput_tUnite_2_row12.Land;
							oneRow_tHashOutput_tUnite_2.KundenId = tHashInput_tUnite_2_row12.KundenId;
							oneRow_tHashOutput_tUnite_2.IBAN = tHashInput_tUnite_2_row12.IBAN;
							oneRow_tHashOutput_tUnite_2.Einkommen = tHashInput_tUnite_2_row12.Einkommen;
							oneRow_tHashOutput_tUnite_2.Kreditlimit = tHashInput_tUnite_2_row12.Kreditlimit;
							oneRow_tHashOutput_tUnite_2.Score = tHashInput_tUnite_2_row12.Score;
							oneRow_tHashOutput_tUnite_2.Vorname = tHashInput_tUnite_2_row12.Vorname;
							oneRow_tHashOutput_tUnite_2.Nachname = tHashInput_tUnite_2_row12.Nachname;
							oneRow_tHashOutput_tUnite_2.Telefon = tHashInput_tUnite_2_row12.Telefon;
							oneRow_tHashOutput_tUnite_2.E_Mail = tHashInput_tUnite_2_row12.E_Mail;
							oneRow_tHashOutput_tUnite_2.Geburtsdatum = tHashInput_tUnite_2_row12.Geburtsdatum;
							oneRow_tHashOutput_tUnite_2.Geschlecht = tHashInput_tUnite_2_row12.Geschlecht;
							oneRow_tHashOutput_tUnite_2.AdressId = tHashInput_tUnite_2_row12.AdressId;
							oneRow_tHashOutput_tUnite_2.Geburtsort = tHashInput_tUnite_2_row12.Geburtsort;
							oneRow_tHashOutput_tUnite_2.loyalityScore = tHashInput_tUnite_2_row12.loyalityScore;

							tHashFile_tHashOutput_tUnite_2
									.put(oneRow_tHashOutput_tUnite_2);
							nb_line_tHashOutput_tUnite_2++;

							tos_count_tHashOutput_tUnite_2++;

							/**
							 * [tHashOutput_tUnite_2 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_2 process_data_begin ] start
							 */

							currentComponent = "tHashOutput_tUnite_2";

							/**
							 * [tHashOutput_tUnite_2 process_data_begin ] stop
							 */

							/**
							 * [tHashOutput_tUnite_2 process_data_end ] start
							 */

							currentComponent = "tHashOutput_tUnite_2";

							/**
							 * [tHashOutput_tUnite_2 process_data_end ] stop
							 */

							/**
							 * [tUnite_2 process_data_end ] start
							 */

							currentComponent = "tUnite_2";

							/**
							 * [tUnite_2 process_data_end ] stop
							 */

						} // End of branch "LastJoin"

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

					} // End of branch "row11"

					/**
					 * [tUniqRow_1 process_data_end ] start
					 */

					currentComponent = "tUniqRow_1";

					/**
					 * [tUniqRow_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_1 process_data_end ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					/**
					 * [tHashInput_tUnite_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_1 end ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					nb_line_tHashInput_tUnite_1++;
				}

				mf_tHashInput_tUnite_1
						.clearCache("tHashFile_Unifying_Data_JSON_" + pid
								+ "_tHashOutput_tUnite_1");

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_Unifying_Data_JSON_" + pid
								+ "_tHashOutput_tUnite_1");

				globalMap.put("tHashInput_tUnite_1_NB_LINE",
						nb_line_tHashInput_tUnite_1);

				ok_Hash.put("tHashInput_tUnite_1", true);
				end_Hash.put("tHashInput_tUnite_1", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES",
						nb_duplicates_tUniqRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1",
						System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;
				String jsonStr_tExtractJSONFields_1 = "";

				class ConvertJSONString_tExtractJSONFields_1 {
					final static int Brace = 0; // {
					final static int Bracket = 1; // [
					private int barceType = -1;
					private String originalJsonString = "";
					private String originalLoopString = "";
					private String jsonString4XML = null;
					private String loopString4XML = null;
					private String additionRoot = null;

					public void barceType() {

						for (int c = 0; c < originalJsonString.length(); ++c) {
							if (originalJsonString.charAt(c) == '{') {
								barceType = Brace;
								break;
							} else if (originalJsonString.charAt(c) == '[') {
								barceType = Bracket;
								break;
							}
						}
					}

					public void setJsonString(String originalJsonString) {
						this.originalJsonString = originalJsonString;
					}

					public void setLoopString(String originalLoopString) {
						this.originalLoopString = originalLoopString;
					}

					public String getJsonString4XML() {
						return jsonString4XML;
					}

					public String getLoopString4XML() {
						if (loopString4XML.length() > 1
								&& loopString4XML.endsWith("/")) {
							loopString4XML = loopString4XML.substring(0,
									loopString4XML.length() - 1);
						}
						return loopString4XML;
					}

					public void setAdditionRoot(String additionRoot) {
						this.additionRoot = additionRoot;
					}

					public String getAdditionRoot() {
						return additionRoot;
					}

					public void generate() {
						barceType();
						jsonString4XML = originalJsonString;
						loopString4XML = originalLoopString;
						if (Brace == barceType) {
							if (isNeedAddRoot(originalJsonString)) {
								jsonString4XML = "{ \"root\": "
										+ originalJsonString + " }";
								loopString4XML = "root" + originalLoopString;
								setAdditionRoot("root");
							}
						} else if (Bracket == barceType) {
							jsonString4XML = "{ \"root\" : { \"object\": "
									+ originalJsonString + " } }";
							loopString4XML = "root/object" + originalLoopString;
							setAdditionRoot("object");
						}
					}

					public boolean isNeedAddRoot(String originalJsonString) {
						boolean isNeedAddRoot = false;
						net.sf.json.JSONObject jso = net.sf.json.JSONObject
								.fromObject(originalJsonString);
						String jsonKey = "";
						Object firstObject = null;
						if (jso.names().size() == 1) {
							jsonKey = jso.names().get(0).toString();
							firstObject = jso.get(jsonKey);
						}
						if (jso.size() > 1
								|| (firstObject != null
										&& firstObject instanceof net.sf.json.JSONArray && ((net.sf.json.JSONArray) firstObject)
										.size() > 1)) {
							isNeedAddRoot = true;
						}
						return isNeedAddRoot;
					}

				}

				ConvertJSONString_tExtractJSONFields_1 cjs_tExtractJSONFields_1 = new ConvertJSONString_tExtractJSONFields_1();

				de.odysseus.staxon.json.JsonXMLConfig config_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLConfigBuilder()
						.multiplePI(false).build();
				de.odysseus.staxon.json.JsonXMLInputFactory jsonXMLInputFactory_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLInputFactory(
						config_tExtractJSONFields_1);
				javax.xml.stream.XMLOutputFactory xmlOutputFactory_tExtractJSONFields_1 = javax.xml.stream.XMLOutputFactory
						.newInstance();
				boolean isGetWholeJson_tExtractJSONFields_1 = false;

				class OriginalJSONString_tExtractJSONFields_1 {
				}

				OriginalJSONString_tExtractJSONFields_1 originalJSONString_tExtractJSONFields_1 = new OriginalJSONString_tExtractJSONFields_1();

				class XML_API_tExtractJSONFields_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				String xmlStr_tExtractJSONFields_1 = "";

				XML_API_tExtractJSONFields_1 xml_api_tExtractJSONFields_1 = new XML_API_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tFileInputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_1", false);
				start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_1";

				int tos_count_tFileInputJSON_1 = 0;

				class JSONUtil_tFileInputJSON_1 {
					public int getData(
							String query,
							javax.script.Invocable invocableEngine,
							java.util.List<org.json.simple.JSONArray> jsonResultList,
							int recordMaxSize) {
						try {
							// only 2 types: String/Boolean
							String resultObj = invocableEngine.invokeFunction(
									"jsonPath", query).toString();
							if (!"false".equals(resultObj)) {
								org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
										.parse(resultObj);
								jsonResultList.add(resultArray);
								if (recordMaxSize != -1
										&& recordMaxSize != resultArray.size()) {
									// just give an error, don't stop

									System.err
											.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
								}
								recordMaxSize = Math.max(recordMaxSize,
										resultArray.size());
							} else {

								System.err
										.println("Can't find any data with JSONPath "
												+ query);
								// add null to take a place in List(buffer)
								jsonResultList.add(null);
							}
						} catch (java.lang.Exception e) {

							e.printStackTrace();
						}
						return recordMaxSize;
					}

					void setRowValue_0(
							row10Struct row10,
							java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_1,
							int nbResultArray_tFileInputJSON_1)
							throws java.io.UnsupportedEncodingException {
						if (JSONResultList_tFileInputJSON_1.get(0) != null
								&& nbResultArray_tFileInputJSON_1 < JSONResultList_tFileInputJSON_1
										.get(0).size()
								&& JSONResultList_tFileInputJSON_1.get(0).get(
										nbResultArray_tFileInputJSON_1) != null) {
							row10.Clients = JSONResultList_tFileInputJSON_1
									.get(0).get(nbResultArray_tFileInputJSON_1)
									.toString();
						} else {

							row10.Clients = null;

						}
					}
				}
				int nb_line_tFileInputJSON_1 = 0;
				java.lang.Object jsonText_tFileInputJSON_1 = null;
				JSONUtil_tFileInputJSON_1 jsonUtil_tFileInputJSON_1 = new JSONUtil_tFileInputJSON_1();
				java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_1 = new java.util.ArrayList<org.json.simple.JSONArray>();
				int recordMaxSize_tFileInputJSON_1 = -1;

				// init js json engine
				javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_1 = new javax.script.ScriptEngineManager();
				javax.script.ScriptEngine jsEngine_tFileInputJSON_1 = scriptEngineMgr_tFileInputJSON_1
						.getEngineByName("JavaScript");
				if (jsEngine_tFileInputJSON_1 == null) {

					System.err.println("No script engine found for JavaScript");
				} else {
					java.net.URL jsonjsUrl_tFileInputJSON_1 = com.jsonpath.test.ReadJar.class
							.getResource("json.js");
					if (jsonjsUrl_tFileInputJSON_1 != null) {
						jsEngine_tFileInputJSON_1
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonjsUrl_tFileInputJSON_1
														.openStream())));
					}

					java.net.URL jsonpathjsUrl_tFileInputJSON_1 = com.jsonpath.test.ReadJar.class
							.getResource("jsonpath.js");
					if (jsonpathjsUrl_tFileInputJSON_1 != null) {
						jsEngine_tFileInputJSON_1
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonpathjsUrl_tFileInputJSON_1
														.openStream())));
					}
					Object filenameOrStream_tFileInputJSON_1 = null;
					try {
						filenameOrStream_tFileInputJSON_1 = "C:/Users/Student/Desktop/workspace_neu/JSON_File.txt";
					} catch (java.lang.Exception e_tFileInputJSON_1) {

						System.err.println(e_tFileInputJSON_1.getMessage());
					}

					java.io.InputStreamReader fr_tFileInputJSON_1 = null;
					try {
						if (filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream) {
							fr_tFileInputJSON_1 = new java.io.InputStreamReader(
									(java.io.InputStream) filenameOrStream_tFileInputJSON_1,
									"UTF-8");
						} else {
							java.net.URL url_tFileInputJSON_1 = new java.net.URL(
									"http://localhost:8091/clients");
							java.net.URLConnection urlConn_tFileInputJSON_1 = url_tFileInputJSON_1
									.openConnection();
							fr_tFileInputJSON_1 = new java.io.InputStreamReader(
									urlConn_tFileInputJSON_1.getInputStream(),
									"UTF-8");
						}

						jsonText_tFileInputJSON_1 = org.json.simple.JSONValue
								.parse(fr_tFileInputJSON_1);
						if (jsonText_tFileInputJSON_1 == null) {
							throw new RuntimeException(
									"fail to parse the json file : "
											+ "http://localhost:8091/clients");
						}
					} catch (java.lang.Exception e_tFileInputJSON_1) {

						System.err.println(e_tFileInputJSON_1.getMessage());

					} finally {
						if (fr_tFileInputJSON_1 != null) {
							fr_tFileInputJSON_1.close();
						}
					}

					if (jsonText_tFileInputJSON_1 != null) {
						jsEngine_tFileInputJSON_1.eval("var obj="
								+ jsonText_tFileInputJSON_1.toString());

						javax.script.Invocable invocableEngine_tFileInputJSON_1 = (javax.script.Invocable) jsEngine_tFileInputJSON_1;

						recordMaxSize_tFileInputJSON_1 = jsonUtil_tFileInputJSON_1
								.getData("$.[0:9]",
										invocableEngine_tFileInputJSON_1,
										JSONResultList_tFileInputJSON_1,
										recordMaxSize_tFileInputJSON_1);

					}
				}
				for (int nbResultArray_tFileInputJSON_1 = 0; nbResultArray_tFileInputJSON_1 < recordMaxSize_tFileInputJSON_1; nbResultArray_tFileInputJSON_1++) {

					nb_line_tFileInputJSON_1++;
					row10 = null;
					boolean whetherReject_tFileInputJSON_1 = false;
					row10 = new row10Struct();
					try {
						jsonUtil_tFileInputJSON_1.setRowValue_0(row10,
								JSONResultList_tFileInputJSON_1,
								nbResultArray_tFileInputJSON_1);
					} catch (java.lang.Exception e) {
						whetherReject_tFileInputJSON_1 = true;
						System.err.println(e.getMessage());
						row10 = null;
					}

					/**
					 * [tFileInputJSON_1 begin ] stop
					 */

					/**
					 * [tFileInputJSON_1 main ] start
					 */

					currentComponent = "tFileInputJSON_1";

					tos_count_tFileInputJSON_1++;

					/**
					 * [tFileInputJSON_1 main ] stop
					 */

					/**
					 * [tFileInputJSON_1 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_begin ] stop
					 */
					// Start of branch "row10"
					if (row10 != null) {

						/**
						 * [tExtractJSONFields_1 main ] start
						 */

						currentComponent = "tExtractJSONFields_1";

						// row10
						// row10

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId,
									1, 1);
						}

						if (row10.Clients != null) {// C_01
							jsonStr_tExtractJSONFields_1 = row10.Clients
									.toString();

							row13 = null;

							org.dom4j.io.SAXReader reader_tExtractJSONFields_1 = new org.dom4j.io.SAXReader();
							org.dom4j.Document doc_tExtractJSONFields_1 = null;
							java.util.HashMap xmlNameSpaceMap_tExtractJSONFields_1 = new java.util.HashMap<String, String>();
							org.dom4j.XPath x_tExtractJSONFields_1 = null;
							java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractJSONFields_1 = null;
							boolean isStructError_tExtractJSONFields_1 = true;

							String loopQuery_tExtractJSONFields_1 = "/";
							String oraginalJsonStr_tExtractJSONFields_1 = jsonStr_tExtractJSONFields_1;
							cjs_tExtractJSONFields_1
									.setJsonString(jsonStr_tExtractJSONFields_1);
							cjs_tExtractJSONFields_1
									.setLoopString(loopQuery_tExtractJSONFields_1);
							java.io.ByteArrayInputStream bais_tExtractJSONFields_1 = null;
							java.io.ByteArrayOutputStream baos_tExtractJSONFields_1 = new java.io.ByteArrayOutputStream();
							try {
								cjs_tExtractJSONFields_1.generate();
								jsonStr_tExtractJSONFields_1 = cjs_tExtractJSONFields_1
										.getJsonString4XML();
								loopQuery_tExtractJSONFields_1 = cjs_tExtractJSONFields_1
										.getLoopString4XML();
								bais_tExtractJSONFields_1 = new ByteArrayInputStream(
										jsonStr_tExtractJSONFields_1
												.getBytes("UTF-8"));
								javax.xml.stream.XMLEventReader xmlEventReader_tExtractJSONFields_1 = jsonXMLInputFactory_tExtractJSONFields_1
										.createXMLEventReader(bais_tExtractJSONFields_1);
								javax.xml.stream.XMLEventWriter xmLEventWriter_tExtractJSONFields_1 = xmlOutputFactory_tExtractJSONFields_1
										.createXMLEventWriter(
												baos_tExtractJSONFields_1,
												"UTF-8");
								xmLEventWriter_tExtractJSONFields_1
										.add(xmlEventReader_tExtractJSONFields_1);
								// convert json string to xml
								xmlStr_tExtractJSONFields_1 = baos_tExtractJSONFields_1
										.toString();
								xmLEventWriter_tExtractJSONFields_1.close();
								xmlEventReader_tExtractJSONFields_1.close();

								doc_tExtractJSONFields_1 = reader_tExtractJSONFields_1
										.read(new java.io.StringReader(
												xmlStr_tExtractJSONFields_1));
								x_tExtractJSONFields_1 = doc_tExtractJSONFields_1
										.createXPath(loopQuery_tExtractJSONFields_1);
								x_tExtractJSONFields_1
										.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
								nodeList_tExtractJSONFields_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractJSONFields_1
										.selectNodes(doc_tExtractJSONFields_1);
								isStructError_tExtractJSONFields_1 = false;

							} catch (java.lang.Exception ex_tExtractJSONFields_1) {
								System.err.println(ex_tExtractJSONFields_1
										.getMessage());
							} finally {
								baos_tExtractJSONFields_1.close();
								if (bais_tExtractJSONFields_1 != null) {
									bais_tExtractJSONFields_1.close();
								}
							}

							org.dom4j.Node node_tExtractJSONFields_1 = null;
							String str_tExtractJSONFields_1 = "";
							for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
									|| (nodeList_tExtractJSONFields_1 != null && i_tExtractJSONFields_1 < nodeList_tExtractJSONFields_1
											.size()); i_tExtractJSONFields_1++) {

								if (!isStructError_tExtractJSONFields_1) {
									row13 = null;
									row13 = new row13Struct();

									org.dom4j.tree.AbstractNode temp_tExtractJSONFields_1 = nodeList_tExtractJSONFields_1
											.get(i_tExtractJSONFields_1);

									nb_line_tExtractJSONFields_1++;
									try {
										org.dom4j.XPath xTmp0_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("address/street");
										xTmp0_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj0_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj0_tExtractJSONFields_1 instanceof String
												|| obj0_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj0_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Stra_e = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.Stra_e = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.Stra_e = null;
										} else {

											row13.Stra_e = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp1_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("address/postalCode");
										xTmp1_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj1_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj1_tExtractJSONFields_1 instanceof String
												|| obj1_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj1_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.PLZ = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.PLZ = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.PLZ = null;
										} else {

											row13.PLZ = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp2_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("address/city");
										xTmp2_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj2_tExtractJSONFields_1 = xTmp2_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj2_tExtractJSONFields_1 instanceof String
												|| obj2_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj2_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp2_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp2_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Ort = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.Ort = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.Ort = null;
										} else {

											row13.Ort = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp3_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("address/country");
										xTmp3_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj3_tExtractJSONFields_1 = xTmp3_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj3_tExtractJSONFields_1 instanceof String
												|| obj3_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj3_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp3_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp3_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Land = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.Land = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.Land = null;
										} else {

											row13.Land = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp4_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("id");
										xTmp4_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj4_tExtractJSONFields_1 = xTmp4_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj4_tExtractJSONFields_1 instanceof String
												|| obj4_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj4_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp4_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp4_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.KundenId = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)
												|| xml_api_tExtractJSONFields_1
														.isMissing(node_tExtractJSONFields_1)) {
											row13.KundenId = null;
										} else {

											row13.KundenId = ParserUtils
													.parseTo_Integer(str_tExtractJSONFields_1);

										}

										org.dom4j.XPath xTmp6_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("monthlyNetIncome");
										xTmp6_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj6_tExtractJSONFields_1 = xTmp6_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj6_tExtractJSONFields_1 instanceof String
												|| obj6_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj6_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp6_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp6_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Einkommen = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)
												|| xml_api_tExtractJSONFields_1
														.isMissing(node_tExtractJSONFields_1)) {
											row13.Einkommen = null;
										} else {

											row13.Einkommen = ParserUtils
													.parseTo_Float(str_tExtractJSONFields_1);

										}

										org.dom4j.XPath xTmp7_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("creditLimit");
										xTmp7_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj7_tExtractJSONFields_1 = xTmp7_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj7_tExtractJSONFields_1 instanceof String
												|| obj7_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj7_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp7_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp7_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Kreditlimit = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)
												|| xml_api_tExtractJSONFields_1
														.isMissing(node_tExtractJSONFields_1)) {
											row13.Kreditlimit = null;
										} else {

											row13.Kreditlimit = ParserUtils
													.parseTo_Float(str_tExtractJSONFields_1);

										}

										org.dom4j.XPath xTmp8_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("schufaScore");
										xTmp8_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj8_tExtractJSONFields_1 = xTmp8_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj8_tExtractJSONFields_1 instanceof String
												|| obj8_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj8_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp8_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp8_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Score = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)
												|| xml_api_tExtractJSONFields_1
														.isMissing(node_tExtractJSONFields_1)) {
											row13.Score = null;
										} else {

											row13.Score = ParserUtils
													.parseTo_Integer(str_tExtractJSONFields_1);

										}

										org.dom4j.XPath xTmp9_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("prename");
										xTmp9_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj9_tExtractJSONFields_1 = xTmp9_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj9_tExtractJSONFields_1 instanceof String
												|| obj9_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj9_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp9_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp9_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Vorname = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.Vorname = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.Vorname = null;
										} else {

											row13.Vorname = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp10_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("surname");
										xTmp10_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj10_tExtractJSONFields_1 = xTmp10_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj10_tExtractJSONFields_1 instanceof String
												|| obj10_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj10_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp10_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp10_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Nachname = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.Nachname = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.Nachname = null;
										} else {

											row13.Nachname = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp11_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("phone");
										xTmp11_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj11_tExtractJSONFields_1 = xTmp11_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj11_tExtractJSONFields_1 instanceof String
												|| obj11_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj11_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp11_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp11_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Telefon = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.Telefon = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.Telefon = null;
										} else {

											row13.Telefon = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp12_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("email");
										xTmp12_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj12_tExtractJSONFields_1 = xTmp12_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj12_tExtractJSONFields_1 instanceof String
												|| obj12_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj12_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp12_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp12_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.E_Mail = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.E_Mail = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.E_Mail = null;
										} else {

											row13.E_Mail = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp13_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("dateOfBirth");
										xTmp13_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj13_tExtractJSONFields_1 = xTmp13_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj13_tExtractJSONFields_1 instanceof String
												|| obj13_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj13_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp13_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp13_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Geburtsdatum = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.Geburtsdatum = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.Geburtsdatum = null;
										} else {

											row13.Geburtsdatum = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp14_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("gender");
										xTmp14_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj14_tExtractJSONFields_1 = xTmp14_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj14_tExtractJSONFields_1 instanceof String
												|| obj14_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj14_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp14_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp14_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Geschlecht = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.Geschlecht = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.Geschlecht = null;
										} else {

											row13.Geschlecht = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp15_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("address/id");
										xTmp15_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj15_tExtractJSONFields_1 = xTmp15_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj15_tExtractJSONFields_1 instanceof String
												|| obj15_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj15_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp15_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp15_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.AdressId = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.AdressId = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.AdressId = null;
										} else {

											row13.AdressId = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp16_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("birthPlace");
										xTmp16_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj16_tExtractJSONFields_1 = xTmp16_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj16_tExtractJSONFields_1 instanceof String
												|| obj16_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj16_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp16_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp16_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.Geburtsort = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)) {
											row13.Geburtsort = "";
										} else if (xml_api_tExtractJSONFields_1
												.isMissing(node_tExtractJSONFields_1)) {
											row13.Geburtsort = null;
										} else {

											row13.Geburtsort = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp17_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("loyalityScore");
										xTmp17_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj17_tExtractJSONFields_1 = xTmp17_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj17_tExtractJSONFields_1 instanceof String
												|| obj17_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String
													.valueOf(obj17_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp17_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp17_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1
												.isDefNull(node_tExtractJSONFields_1)) {
											row13.loyalityScore = null;
										} else if (xml_api_tExtractJSONFields_1
												.isEmpty(node_tExtractJSONFields_1)
												|| xml_api_tExtractJSONFields_1
														.isMissing(node_tExtractJSONFields_1)) {
											row13.loyalityScore = null;
										} else {

											row13.loyalityScore = ParserUtils
													.parseTo_Integer(str_tExtractJSONFields_1);

										}

									} catch (java.lang.Exception ex_tExtractJSONFields_1) {
										System.err
												.println(ex_tExtractJSONFields_1
														.getMessage());
										row13 = null;
									}
								}

								isStructError_tExtractJSONFields_1 = false;

								tos_count_tExtractJSONFields_1++;

								/**
								 * [tExtractJSONFields_1 main ] stop
								 */

								/**
								 * [tExtractJSONFields_1 process_data_begin ]
								 * start
								 */

								currentComponent = "tExtractJSONFields_1";

								/**
								 * [tExtractJSONFields_1 process_data_begin ]
								 * stop
								 */
								// Start of branch "row13"
								if (row13 != null) {

									/**
									 * [tUnite_2 main ] start
									 */

									currentComponent = "tUnite_2";

									// LastJoin
									// row13

									// row13
									// row13

									if (execStat) {
										runStat.updateStatOnConnection("row13"
												+ iterateId, 1, 1);
									}

									// ////////

									// for output
									tHashInput_tUnite_2_row12 = new tHashInput_tUnite_2_row12Struct();

									tHashInput_tUnite_2_row12.Stra_e = row13.Stra_e;
									tHashInput_tUnite_2_row12.PLZ = row13.PLZ;
									tHashInput_tUnite_2_row12.Ort = row13.Ort;
									tHashInput_tUnite_2_row12.Land = row13.Land;
									tHashInput_tUnite_2_row12.KundenId = row13.KundenId;
									tHashInput_tUnite_2_row12.IBAN = row13.IBAN;
									tHashInput_tUnite_2_row12.Einkommen = row13.Einkommen;
									tHashInput_tUnite_2_row12.Kreditlimit = row13.Kreditlimit;
									tHashInput_tUnite_2_row12.Score = row13.Score;
									tHashInput_tUnite_2_row12.Vorname = row13.Vorname;
									tHashInput_tUnite_2_row12.Nachname = row13.Nachname;
									tHashInput_tUnite_2_row12.Telefon = row13.Telefon;
									tHashInput_tUnite_2_row12.E_Mail = row13.E_Mail;
									tHashInput_tUnite_2_row12.Geburtsdatum = row13.Geburtsdatum;
									tHashInput_tUnite_2_row12.Geschlecht = row13.Geschlecht;
									tHashInput_tUnite_2_row12.AdressId = row13.AdressId;
									tHashInput_tUnite_2_row12.Geburtsort = row13.Geburtsort;
									tHashInput_tUnite_2_row12.loyalityScore = row13.loyalityScore;

									nb_line_tUnite_2++;

									// ////////

									tos_count_tUnite_2++;

									/**
									 * [tUnite_2 main ] stop
									 */

									/**
									 * [tUnite_2 process_data_begin ] start
									 */

									currentComponent = "tUnite_2";

									/**
									 * [tUnite_2 process_data_begin ] stop
									 */

									/**
									 * [tHashOutput_tUnite_2 main ] start
									 */

									currentComponent = "tHashOutput_tUnite_2";

									// tHashInput_tUnite_2_tHashInput_tUnite_2_row12
									// tHashInput_tUnite_2_row12

									if (execStat) {
										runStat.updateStatOnConnection(
												"tHashInput_tUnite_2_tHashInput_tUnite_2_row12"
														+ iterateId, 1, 1);
									}

									tHashInput_tUnite_2_row12Struct oneRow_tHashOutput_tUnite_2 = new tHashInput_tUnite_2_row12Struct();

									oneRow_tHashOutput_tUnite_2.Stra_e = tHashInput_tUnite_2_row12.Stra_e;
									oneRow_tHashOutput_tUnite_2.PLZ = tHashInput_tUnite_2_row12.PLZ;
									oneRow_tHashOutput_tUnite_2.Ort = tHashInput_tUnite_2_row12.Ort;
									oneRow_tHashOutput_tUnite_2.Land = tHashInput_tUnite_2_row12.Land;
									oneRow_tHashOutput_tUnite_2.KundenId = tHashInput_tUnite_2_row12.KundenId;
									oneRow_tHashOutput_tUnite_2.IBAN = tHashInput_tUnite_2_row12.IBAN;
									oneRow_tHashOutput_tUnite_2.Einkommen = tHashInput_tUnite_2_row12.Einkommen;
									oneRow_tHashOutput_tUnite_2.Kreditlimit = tHashInput_tUnite_2_row12.Kreditlimit;
									oneRow_tHashOutput_tUnite_2.Score = tHashInput_tUnite_2_row12.Score;
									oneRow_tHashOutput_tUnite_2.Vorname = tHashInput_tUnite_2_row12.Vorname;
									oneRow_tHashOutput_tUnite_2.Nachname = tHashInput_tUnite_2_row12.Nachname;
									oneRow_tHashOutput_tUnite_2.Telefon = tHashInput_tUnite_2_row12.Telefon;
									oneRow_tHashOutput_tUnite_2.E_Mail = tHashInput_tUnite_2_row12.E_Mail;
									oneRow_tHashOutput_tUnite_2.Geburtsdatum = tHashInput_tUnite_2_row12.Geburtsdatum;
									oneRow_tHashOutput_tUnite_2.Geschlecht = tHashInput_tUnite_2_row12.Geschlecht;
									oneRow_tHashOutput_tUnite_2.AdressId = tHashInput_tUnite_2_row12.AdressId;
									oneRow_tHashOutput_tUnite_2.Geburtsort = tHashInput_tUnite_2_row12.Geburtsort;
									oneRow_tHashOutput_tUnite_2.loyalityScore = tHashInput_tUnite_2_row12.loyalityScore;

									tHashFile_tHashOutput_tUnite_2
											.put(oneRow_tHashOutput_tUnite_2);
									nb_line_tHashOutput_tUnite_2++;

									tos_count_tHashOutput_tUnite_2++;

									/**
									 * [tHashOutput_tUnite_2 main ] stop
									 */

									/**
									 * [tHashOutput_tUnite_2 process_data_begin
									 * ] start
									 */

									currentComponent = "tHashOutput_tUnite_2";

									/**
									 * [tHashOutput_tUnite_2 process_data_begin
									 * ] stop
									 */

									/**
									 * [tHashOutput_tUnite_2 process_data_end ]
									 * start
									 */

									currentComponent = "tHashOutput_tUnite_2";

									/**
									 * [tHashOutput_tUnite_2 process_data_end ]
									 * stop
									 */

									/**
									 * [tUnite_2 process_data_end ] start
									 */

									currentComponent = "tUnite_2";

									/**
									 * [tUnite_2 process_data_end ] stop
									 */

								} // End of branch "row13"

								// end for
							}

						} // C_01

						/**
						 * [tExtractJSONFields_1 process_data_end ] start
						 */

						currentComponent = "tExtractJSONFields_1";

						/**
						 * [tExtractJSONFields_1 process_data_end ] stop
						 */

					} // End of branch "row10"

					/**
					 * [tFileInputJSON_1 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_1 end ] start
					 */

					currentComponent = "tFileInputJSON_1";

				}
				globalMap.put("tFileInputJSON_1_NB_LINE",
						nb_line_tFileInputJSON_1);

				ok_Hash.put("tFileInputJSON_1", true);
				end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE",
						nb_line_tExtractJSONFields_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("LastJoin" + iterateId,
								2, 0);
					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row13" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_2 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_2";

				globalMap.put("tHashOutput_tUnite_2_NB_LINE",
						nb_line_tHashOutput_tUnite_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"tHashInput_tUnite_2_tHashInput_tUnite_2_row12"
										+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tHashOutput_tUnite_2", true);
				end_Hash.put("tHashOutput_tUnite_2", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_tUnite_1 finally ] start
				 */

				currentComponent = "tHashInput_tUnite_1";

				/**
				 * [tHashInput_tUnite_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tFileInputJSON_1 finally ] start
				 */

				currentComponent = "tFileInputJSON_1";

				/**
				 * [tFileInputJSON_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tHashOutput_tUnite_2 finally ] start
				 */

				currentComponent = "tHashOutput_tUnite_2";

				/**
				 * [tHashOutput_tUnite_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Float Kreditlimit;

		public Float getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public String Geschlecht;

		public String getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		public String Geburtsort;

		public String getGeburtsort() {
			return this.Geburtsort;
		}

		public Integer loyalityScore;

		public Integer getLoyalityScore() {
			return this.loyalityScore;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;
			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;
			other.Geburtsort = this.Geburtsort;
			other.loyalityScore = this.loyalityScore;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Kreditlimit = null;
					} else {
						this.Kreditlimit = dis.readFloat();
					}

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readString(dis);

					this.AdressId = readString(dis);

					this.Geburtsort = readString(dis);

					this.loyalityScore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Float

				if (this.Kreditlimit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Kreditlimit);
				}

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// String

				writeString(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

				// String

				writeString(this.Geburtsort, dos);

				// Integer

				writeInteger(this.loyalityScore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + Geschlecht);
			sb.append(",AdressId=" + AdressId);
			sb.append(",Geburtsort=" + Geburtsort);
			sb.append(",loyalityScore=" + String.valueOf(loyalityScore));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_5Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public String address_id;

		public String getAddress_id() {
			return this.address_id;
		}

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MARIUS_Unifying_Data_JSON.length) {
					if (length < 1024
							&& commonByteArray_MARIUS_Unifying_Data_JSON.length == 0) {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[1024];
					} else {
						commonByteArray_MARIUS_Unifying_Data_JSON = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MARIUS_Unifying_Data_JSON, 0,
						length);
				strReturn = new String(
						commonByteArray_MARIUS_Unifying_Data_JSON, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

					this.address_id = readString(dis);

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.address_id, dos);

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("address_id=" + address_id);
			sb.append(",Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_2_RunAfterStruct implements
			routines.system.IPersistableRow<tHashInput_tUnite_2_RunAfterStruct> {
		final static byte[] commonByteArrayLock_MARIUS_Unifying_Data_JSON = new byte[0];
		static byte[] commonByteArray_MARIUS_Unifying_Data_JSON = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MARIUS_Unifying_Data_JSON) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_2_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_tUnite_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHashInput_tUnite_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);
				tHashInput_tUnite_1Process(globalMap);

				row12Struct row12 = new row12Struct();

				/**
				 * [tFileOutputXML_1 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_1", false);
				start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputXML_1 = 0;

				String originalFileName_tFileOutputXML_1 = "C:/Users/Student/Documents/Uni/SS19/AvG/A2/out.xml";
				java.io.File originalFile_tFileOutputXML_1 = new java.io.File(
						originalFileName_tFileOutputXML_1);

				String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
				java.io.File file_tFileOutputXML_1 = new java.io.File(
						fileName_tFileOutputXML_1);
				if (!file_tFileOutputXML_1.isAbsolute()) {
					file_tFileOutputXML_1 = file_tFileOutputXML_1
							.getCanonicalFile();
				}

				// create directory only if not exists

				file_tFileOutputXML_1.getParentFile().mkdirs();

				String[] headers_tFileOutputXML_1 = new String[2];

				headers_tFileOutputXML_1[0] = "<?xml version=\"1.0\" encoding=\""
						+ "ISO-8859-15" + "\"?>";

				String[] footers_tFileOutputXML_1 = new String[1];

				headers_tFileOutputXML_1[1] = "<" + "root" + ">";

				footers_tFileOutputXML_1[0] = "</" + "root" + ">";

				int nb_line_tFileOutputXML_1 = 0;

				java.io.BufferedWriter out_tFileOutputXML_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										file_tFileOutputXML_1), "ISO-8859-15"));

				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[0]);
				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[1]);
				out_tFileOutputXML_1.newLine();

				/**
				 * [tFileOutputXML_1 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_2 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_2", false);
				start_Hash.put("tHashInput_tUnite_2",
						System.currentTimeMillis());

				currentComponent = "tHashInput_tUnite_2";

				int tos_count_tHashInput_tUnite_2 = 0;

				int nb_line_tHashInput_tUnite_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_2_row12Struct> tHashFile_tHashInput_tUnite_2 = mf_tHashInput_tUnite_2
						.getAdvancedMemoryHashFile("tHashFile_Unifying_Data_JSON_"
								+ pid + "_tHashOutput_tUnite_2");
				if (tHashFile_tHashInput_tUnite_2 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_2_row12Struct> iterator_tHashInput_tUnite_2 = tHashFile_tHashInput_tUnite_2
						.iterator();
				while (iterator_tHashInput_tUnite_2.hasNext()) {
					tHashInput_tUnite_2_row12Struct next_tHashInput_tUnite_2 = iterator_tHashInput_tUnite_2
							.next();

					row12.Stra_e = next_tHashInput_tUnite_2.Stra_e;
					row12.PLZ = next_tHashInput_tUnite_2.PLZ;
					row12.Ort = next_tHashInput_tUnite_2.Ort;
					row12.Land = next_tHashInput_tUnite_2.Land;
					row12.KundenId = next_tHashInput_tUnite_2.KundenId;
					row12.IBAN = next_tHashInput_tUnite_2.IBAN;
					row12.Einkommen = next_tHashInput_tUnite_2.Einkommen;
					row12.Kreditlimit = next_tHashInput_tUnite_2.Kreditlimit;
					row12.Score = next_tHashInput_tUnite_2.Score;
					row12.Vorname = next_tHashInput_tUnite_2.Vorname;
					row12.Nachname = next_tHashInput_tUnite_2.Nachname;
					row12.Telefon = next_tHashInput_tUnite_2.Telefon;
					row12.E_Mail = next_tHashInput_tUnite_2.E_Mail;
					row12.Geburtsdatum = next_tHashInput_tUnite_2.Geburtsdatum;
					row12.Geschlecht = next_tHashInput_tUnite_2.Geschlecht;
					row12.AdressId = next_tHashInput_tUnite_2.AdressId;
					row12.Geburtsort = next_tHashInput_tUnite_2.Geburtsort;
					row12.loyalityScore = next_tHashInput_tUnite_2.loyalityScore;

					/**
					 * [tHashInput_tUnite_2 begin ] stop
					 */

					/**
					 * [tHashInput_tUnite_2 main ] start
					 */

					currentComponent = "tHashInput_tUnite_2";

					tos_count_tHashInput_tUnite_2++;

					/**
					 * [tHashInput_tUnite_2 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_2 process_data_begin ] start
					 */

					currentComponent = "tHashInput_tUnite_2";

					/**
					 * [tHashInput_tUnite_2 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputXML_1 main ] start
					 */

					currentComponent = "tFileOutputXML_1";

					// row12
					// row12

					if (execStat) {
						runStat.updateStatOnConnection("row12" + iterateId, 1,
								1);
					}

					StringBuilder tempRes_tFileOutputXML_1 = new StringBuilder(
							"<" + "row");
					tempRes_tFileOutputXML_1.append(">");
					out_tFileOutputXML_1.write(tempRes_tFileOutputXML_1
							.toString());

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Stra_e"
							+ ">"
							+ ((row12.Stra_e == null) ? "" : (TalendString
									.checkCDATAForXML(row12.Stra_e))) + "</"
							+ "Stra_e" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "PLZ"
							+ ">"
							+ ((row12.PLZ == null) ? "" : (TalendString
									.checkCDATAForXML(row12.PLZ))) + "</"
							+ "PLZ" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Ort"
							+ ">"
							+ ((row12.Ort == null) ? "" : (TalendString
									.checkCDATAForXML(row12.Ort))) + "</"
							+ "Ort" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Land"
							+ ">"
							+ ((row12.Land == null) ? "" : (TalendString
									.checkCDATAForXML(row12.Land))) + "</"
							+ "Land" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1
							.write("<"
									+ "KundenId"
									+ ">"
									+ ((row12.KundenId == null) ? ""
											: (row12.KundenId)) + "</"
									+ "KundenId" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "IBAN"
							+ ">"
							+ ((row12.IBAN == null) ? "" : (TalendString
									.checkCDATAForXML(row12.IBAN))) + "</"
							+ "IBAN" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Einkommen"
							+ ">"
							+ ((row12.Einkommen == null) ? ""
									: (row12.Einkommen)) + "</" + "Einkommen"
							+ ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Kreditlimit"
							+ ">"
							+ ((row12.Kreditlimit == null) ? ""
									: (row12.Kreditlimit)) + "</"
							+ "Kreditlimit" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<" + "Score" + ">"
							+ ((row12.Score == null) ? "" : (row12.Score))
							+ "</" + "Score" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Vorname"
							+ ">"
							+ ((row12.Vorname == null) ? "" : (TalendString
									.checkCDATAForXML(row12.Vorname))) + "</"
							+ "Vorname" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Nachname"
							+ ">"
							+ ((row12.Nachname == null) ? "" : (TalendString
									.checkCDATAForXML(row12.Nachname))) + "</"
							+ "Nachname" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Telefon"
							+ ">"
							+ ((row12.Telefon == null) ? "" : (TalendString
									.checkCDATAForXML(row12.Telefon))) + "</"
							+ "Telefon" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "E_Mail"
							+ ">"
							+ ((row12.E_Mail == null) ? "" : (TalendString
									.checkCDATAForXML(row12.E_Mail))) + "</"
							+ "E_Mail" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1
							.write("<"
									+ "Geburtsdatum"
									+ ">"
									+ ((row12.Geburtsdatum == null) ? ""
											: (TalendString
													.checkCDATAForXML(row12.Geburtsdatum)))
									+ "</" + "Geburtsdatum" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Geschlecht"
							+ ">"
							+ ((row12.Geschlecht == null) ? "" : (TalendString
									.checkCDATAForXML(row12.Geschlecht)))
							+ "</" + "Geschlecht" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "AdressId"
							+ ">"
							+ ((row12.AdressId == null) ? "" : (TalendString
									.checkCDATAForXML(row12.AdressId))) + "</"
							+ "AdressId" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "Geburtsort"
							+ ">"
							+ ((row12.Geburtsort == null) ? "" : (TalendString
									.checkCDATAForXML(row12.Geburtsort)))
							+ "</" + "Geburtsort" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("<"
							+ "loyalityScore"
							+ ">"
							+ ((row12.loyalityScore == null) ? ""
									: (row12.loyalityScore)) + "</"
							+ "loyalityScore" + ">");

					out_tFileOutputXML_1.newLine();
					out_tFileOutputXML_1.write("</" + "row" + ">");

					out_tFileOutputXML_1.newLine();

					nb_line_tFileOutputXML_1++;

					tos_count_tFileOutputXML_1++;

					/**
					 * [tFileOutputXML_1 main ] stop
					 */

					/**
					 * [tFileOutputXML_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputXML_1";

					/**
					 * [tFileOutputXML_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputXML_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputXML_1";

					/**
					 * [tFileOutputXML_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_2 process_data_end ] start
					 */

					currentComponent = "tHashInput_tUnite_2";

					/**
					 * [tHashInput_tUnite_2 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_2 end ] start
					 */

					currentComponent = "tHashInput_tUnite_2";

					nb_line_tHashInput_tUnite_2++;
				}

				mf_tHashInput_tUnite_2
						.clearCache("tHashFile_Unifying_Data_JSON_" + pid
								+ "_tHashOutput_tUnite_2");

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_Unifying_Data_JSON_" + pid
								+ "_tHashOutput_tUnite_2");

				globalMap.put("tHashInput_tUnite_2_NB_LINE",
						nb_line_tHashInput_tUnite_2);

				ok_Hash.put("tHashInput_tUnite_2", true);
				end_Hash.put("tHashInput_tUnite_2", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_2 end ] stop
				 */

				/**
				 * [tFileOutputXML_1 end ] start
				 */

				currentComponent = "tFileOutputXML_1";

				out_tFileOutputXML_1.write(footers_tFileOutputXML_1[0]);

				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.close();
				globalMap.put("tFileOutputXML_1_NB_LINE",
						nb_line_tFileOutputXML_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputXML_1", true);
				end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				/**
				 * [tFileOutputXML_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_tUnite_2 finally ] start
				 */

				currentComponent = "tHashInput_tUnite_2";

				/**
				 * [tHashInput_tUnite_2 finally ] stop
				 */

				/**
				 * [tFileOutputXML_1 finally ] start
				 */

				currentComponent = "tFileOutputXML_1";

				/**
				 * [tFileOutputXML_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_tUnite_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Unifying_Data_JSON Unifying_Data_JSONClass = new Unifying_Data_JSON();

		int exitCode = Unifying_Data_JSONClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Unifying_Data_JSON.class
					.getClassLoader().getResourceAsStream(
							"marius/unifying_data_json_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = Unifying_Data_JSON.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tHashInput_tUnite_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tHashInput_tUnite_2) {
			globalMap.put("tHashInput_tUnite_2_SUBPROCESS_STATE", -1);

			e_tHashInput_tUnite_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Unifying_Data_JSON");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 382093 characters generated by Talend Open Studio for Data Integration on the
 * 7. Mai 2019 18:50:01 MESZ
 ************************************************************************************************/
