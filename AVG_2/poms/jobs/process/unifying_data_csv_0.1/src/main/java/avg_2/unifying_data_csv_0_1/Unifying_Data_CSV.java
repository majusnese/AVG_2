// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package avg_2.unifying_data_csv_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Unifying_Data_CSV Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Unifying_Data_CSV implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Unifying_Data_CSV";
	private final String projectName = "AVG_2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Unifying_Data_CSV.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Unifying_Data_CSV.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJoin_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_AVG_2_Unifying_Data_CSV = new byte[0];
		static byte[] commonByteArray_AVG_2_Unifying_Data_CSV = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Integer Kreditlimit;

		public Integer getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public Integer Geschlecht;

		public Integer getGeschlecht() {
			return this.Geschlecht;
		}

		public String address_id;

		public String getAddress_id() {
			return this.address_id;
		}

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.address_id == null) ? 0 : this.address_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.address_id == null) {
				if (other.address_id != null)
					return false;

			} else if (!this.address_id.equals(other.address_id))

				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.KundenId = this.KundenId;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;
			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.address_id = this.address_id;
			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.address_id = this.address_id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AVG_2_Unifying_Data_CSV.length) {
					if (length < 1024
							&& commonByteArray_AVG_2_Unifying_Data_CSV.length == 0) {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[1024];
					} else {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AVG_2_Unifying_Data_CSV, 0,
						length);
				strReturn = new String(commonByteArray_AVG_2_Unifying_Data_CSV,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AVG_2_Unifying_Data_CSV) {

				try {

					int length = 0;

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					this.Kreditlimit = readInteger(dis);

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readInteger(dis);

					this.address_id = readString(dis);

					this.Stra_e = readString(dis);

					this.PLZ = readString(dis);

					this.Ort = readString(dis);

					this.Land = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Integer

				writeInteger(this.Kreditlimit, dos);

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// Integer

				writeInteger(this.Geschlecht, dos);

				// String

				writeString(this.address_id, dos);

				// String

				writeString(this.Stra_e, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.Ort, dos);

				// String

				writeString(this.Land, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + String.valueOf(Geschlecht));
			sb.append(",address_id=" + address_id);
			sb.append(",Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.address_id,
					other.address_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_AVG_2_Unifying_Data_CSV = new byte[0];
		static byte[] commonByteArray_AVG_2_Unifying_Data_CSV = new byte[0];

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Integer Kreditlimit;

		public Integer getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public Integer Geschlecht;

		public Integer getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AVG_2_Unifying_Data_CSV.length) {
					if (length < 1024
							&& commonByteArray_AVG_2_Unifying_Data_CSV.length == 0) {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[1024];
					} else {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AVG_2_Unifying_Data_CSV, 0,
						length);
				strReturn = new String(commonByteArray_AVG_2_Unifying_Data_CSV,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AVG_2_Unifying_Data_CSV) {

				try {

					int length = 0;

					this.KundenId = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					this.Kreditlimit = readInteger(dis);

					this.Score = readInteger(dis);

					this.Vorname = readString(dis);

					this.Nachname = readString(dis);

					this.Telefon = readString(dis);

					this.E_Mail = readString(dis);

					this.Geburtsdatum = readString(dis);

					this.Geschlecht = readInteger(dis);

					this.AdressId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.KundenId, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Integer

				writeInteger(this.Kreditlimit, dos);

				// Integer

				writeInteger(this.Score, dos);

				// String

				writeString(this.Vorname, dos);

				// String

				writeString(this.Nachname, dos);

				// String

				writeString(this.Telefon, dos);

				// String

				writeString(this.E_Mail, dos);

				// String

				writeString(this.Geburtsdatum, dos);

				// Integer

				writeInteger(this.Geschlecht, dos);

				// String

				writeString(this.AdressId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KundenId=" + String.valueOf(KundenId));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + String.valueOf(Geschlecht));
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_AVG_2_Unifying_Data_CSV = new byte[0];
		static byte[] commonByteArray_AVG_2_Unifying_Data_CSV = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Kunden_ID;

		public Integer getKunden_ID() {
			return this.Kunden_ID;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Integer Kreditlimit;

		public Integer getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.Kunden_ID == null) ? 0 : this.Kunden_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.Kunden_ID == null) {
				if (other.Kunden_ID != null)
					return false;

			} else if (!this.Kunden_ID.equals(other.Kunden_ID))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.Kunden_ID = this.Kunden_ID;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.Kunden_ID = this.Kunden_ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AVG_2_Unifying_Data_CSV.length) {
					if (length < 1024
							&& commonByteArray_AVG_2_Unifying_Data_CSV.length == 0) {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[1024];
					} else {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AVG_2_Unifying_Data_CSV, 0,
						length);
				strReturn = new String(commonByteArray_AVG_2_Unifying_Data_CSV,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AVG_2_Unifying_Data_CSV) {

				try {

					int length = 0;

					this.Kunden_ID = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					this.Kreditlimit = readInteger(dis);

					this.Score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Kunden_ID, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Integer

				writeInteger(this.Kreditlimit, dos);

				// Integer

				writeInteger(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Kunden_ID=" + String.valueOf(Kunden_ID));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Kunden_ID, other.Kunden_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_AVG_2_Unifying_Data_CSV = new byte[0];
		static byte[] commonByteArray_AVG_2_Unifying_Data_CSV = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Kunden_ID;

		public Integer getKunden_ID() {
			return this.Kunden_ID;
		}

		public String IBAN;

		public String getIBAN() {
			return this.IBAN;
		}

		public Float Einkommen;

		public Float getEinkommen() {
			return this.Einkommen;
		}

		public Integer Kreditlimit;

		public Integer getKreditlimit() {
			return this.Kreditlimit;
		}

		public Integer Score;

		public Integer getScore() {
			return this.Score;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.Kunden_ID == null) ? 0 : this.Kunden_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_2Struct other = (after_tFileInputDelimited_2Struct) obj;

			if (this.Kunden_ID == null) {
				if (other.Kunden_ID != null)
					return false;

			} else if (!this.Kunden_ID.equals(other.Kunden_ID))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_2Struct other) {

			other.Kunden_ID = this.Kunden_ID;
			other.IBAN = this.IBAN;
			other.Einkommen = this.Einkommen;
			other.Kreditlimit = this.Kreditlimit;
			other.Score = this.Score;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_2Struct other) {

			other.Kunden_ID = this.Kunden_ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AVG_2_Unifying_Data_CSV.length) {
					if (length < 1024
							&& commonByteArray_AVG_2_Unifying_Data_CSV.length == 0) {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[1024];
					} else {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AVG_2_Unifying_Data_CSV, 0,
						length);
				strReturn = new String(commonByteArray_AVG_2_Unifying_Data_CSV,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AVG_2_Unifying_Data_CSV) {

				try {

					int length = 0;

					this.Kunden_ID = readInteger(dis);

					this.IBAN = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Einkommen = null;
					} else {
						this.Einkommen = dis.readFloat();
					}

					this.Kreditlimit = readInteger(dis);

					this.Score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Kunden_ID, dos);

				// String

				writeString(this.IBAN, dos);

				// Float

				if (this.Einkommen == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Einkommen);
				}

				// Integer

				writeInteger(this.Kreditlimit, dos);

				// Integer

				writeInteger(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Kunden_ID=" + String.valueOf(Kunden_ID));
			sb.append(",IBAN=" + IBAN);
			sb.append(",Einkommen=" + String.valueOf(Einkommen));
			sb.append(",Kreditlimit=" + String.valueOf(Kreditlimit));
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Kunden_ID, other.Kunden_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row3Struct row3 = new row3Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tFileOutputXML_1 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_1", false);
				start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputXML_1 = 0;

				String originalFileName_tFileOutputXML_1 = "H:/Talend/TOS_DI-Win32-20181026_1147-V7.1.1/workspace/out.xml";
				java.io.File originalFile_tFileOutputXML_1 = new java.io.File(
						originalFileName_tFileOutputXML_1);

				String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
				java.io.File file_tFileOutputXML_1 = new java.io.File(
						fileName_tFileOutputXML_1);
				if (!file_tFileOutputXML_1.isAbsolute()) {
					file_tFileOutputXML_1 = file_tFileOutputXML_1
							.getCanonicalFile();
				}

				// create directory only if not exists

				file_tFileOutputXML_1.getParentFile().mkdirs();

				String[] headers_tFileOutputXML_1 = new String[2];

				headers_tFileOutputXML_1[0] = "<?xml version=\"1.0\" encoding=\""
						+ "ISO-8859-15" + "\"?>";

				String[] footers_tFileOutputXML_1 = new String[1];

				headers_tFileOutputXML_1[1] = "<" + "root" + ">";

				footers_tFileOutputXML_1[0] = "</" + "root" + ">";

				int nb_line_tFileOutputXML_1 = 0;

				java.io.BufferedWriter out_tFileOutputXML_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										file_tFileOutputXML_1), "ISO-8859-15"));

				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[0]);
				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[1]);
				out_tFileOutputXML_1.newLine();

				/**
				 * [tFileOutputXML_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = null;

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJoin_1 begin ] start
				 */

				ok_Hash.put("tJoin_1", false);
				start_Hash.put("tJoin_1", System.currentTimeMillis());

				currentComponent = "tJoin_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJoin_1 = 0;

				final java.util.Map<row2Struct, row2Struct> tHash_tJoin_1 = (java.util.Map<row2Struct, row2Struct>) globalMap
						.get("tHash_row2");

				class Util_tJoin_1 {
					row2Struct lookupValue = null;
					row2Struct row2HashKey = new row2Struct();

					public boolean isJoined(row1Struct mainRow) {
						row2HashKey.KundenId = mainRow.Kunden_ID;

						row2HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_1.get(row2HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

				int nb_line_tJoin_1 = 0;

				/**
				 * [tJoin_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Users/majus/Desktop/Wichtig/Studium/sem4/avg/A2/A2 Daten/ETL/Accounts.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/majus/Desktop/Wichtig/Studium/sem4/avg/A2/A2 Daten/ETL/Accounts.csv",
								"US-ASCII", "|", "\n", false, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.Kunden_ID = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Kunden_ID",
															"row1", temp,
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
								}

							} else {

								row1.Kunden_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row1.IBAN = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.Einkommen = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Einkommen",
															"row1", temp,
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
								}

							} else {

								row1.Einkommen = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.Kreditlimit = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Kreditlimit",
															"row1", temp,
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
								}

							} else {

								row1.Kreditlimit = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 4;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.Score = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Score", "row1",
															temp,
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
								}

							} else {

								row1.Score = null;

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tJoin_1 main ] start
							 */

							currentComponent = "tJoin_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							row3 = null;

							row3 = new row3Struct();
							row3.KundenId = row1.Kunden_ID;
							row3.IBAN = row1.IBAN;
							row3.Einkommen = row1.Einkommen;
							row3.Kreditlimit = row1.Kreditlimit;
							row3.Score = row1.Score;

							if (util_tJoin_1.isJoined(row1)) {
								row3.Vorname = util_tJoin_1.lookupValue.Vorname;
								row3.Nachname = util_tJoin_1.lookupValue.Nachname;
								row3.Telefon = util_tJoin_1.lookupValue.Telefon;
								row3.E_Mail = util_tJoin_1.lookupValue.E_Mail;
								row3.Geburtsdatum = util_tJoin_1.lookupValue.Geburtsdatum;
								row3.Geschlecht = util_tJoin_1.lookupValue.Geschlecht;
								row3.AdressId = util_tJoin_1.lookupValue.AdressId;
							}

							// /////////////////////

							tos_count_tJoin_1++;

							/**
							 * [tJoin_1 main ] stop
							 */

							/**
							 * [tJoin_1 process_data_begin ] start
							 */

							currentComponent = "tJoin_1";

							/**
							 * [tJoin_1 process_data_begin ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3"
											+ iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row4"
								// /////////////////////////////////////////////

								boolean forceLooprow4 = false;

								row4Struct row4ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row4HashKey.address_id = row3.AdressId;

									row4HashKey.hashCodeDirty = true;

									tFileInputDelimited_1Process(globalMap);

									tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
											.get("tHash_Lookup_row4"));

									tHash_Lookup_row4.initGet();

									tHash_Lookup_row4.lookup(row4HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row4 != null
										&& tHash_Lookup_row4
												.getCount(row4HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.address_id = '"
									// + row4HashKey.address_id + "'");
								} // G 071

								row4Struct row4 = null;

								row4Struct fromLookup_row4 = null;
								row4 = row4Default;

								if (tHash_Lookup_row4 != null
										&& tHash_Lookup_row4.hasNext()) { // G
																			// 099

									fromLookup_row4 = tHash_Lookup_row4.next();

								} // G 099

								if (fromLookup_row4 != null) {
									row4 = fromLookup_row4;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									out1 = null;

									// # Output table : 'out1'
									out1_tmp.KundenId = row3.KundenId;
									out1_tmp.IBAN = row3.IBAN;
									out1_tmp.Einkommen = row3.Einkommen;
									out1_tmp.Kreditlimit = row3.Kreditlimit;
									out1_tmp.Score = row3.Score;
									out1_tmp.Vorname = row3.Vorname;
									out1_tmp.Nachname = row3.Nachname;
									out1_tmp.Telefon = row3.Telefon;
									out1_tmp.E_Mail = row3.E_Mail;
									out1_tmp.Geburtsdatum = row3.Geburtsdatum;
									out1_tmp.Geschlecht = row3.Geschlecht;
									out1_tmp.address_id = row4.address_id;
									out1_tmp.Stra_e = row4.Stra_e;
									out1_tmp.PLZ = row4.PLZ;
									out1_tmp.Ort = row4.Ort;
									out1_tmp.Land = row4.Land;
									out1 = out1_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
								// Start of branch "out1"
								if (out1 != null) {

									/**
									 * [tFileOutputXML_1 main ] start
									 */

									currentComponent = "tFileOutputXML_1";

									// out1
									// out1

									if (execStat) {
										runStat.updateStatOnConnection("out1"
												+ iterateId, 1, 1);
									}

									StringBuilder tempRes_tFileOutputXML_1 = new StringBuilder(
											"<" + "row");
									tempRes_tFileOutputXML_1.append(">");
									out_tFileOutputXML_1
											.write(tempRes_tFileOutputXML_1
													.toString());

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1.write("<"
											+ "KundenId"
											+ ">"
											+ ((out1.KundenId == null) ? ""
													: (out1.KundenId)) + "</"
											+ "KundenId" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "IBAN"
													+ ">"
													+ ((out1.IBAN == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.IBAN)))
													+ "</" + "IBAN" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1.write("<"
											+ "Einkommen"
											+ ">"
											+ ((out1.Einkommen == null) ? ""
													: (out1.Einkommen)) + "</"
											+ "Einkommen" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1.write("<"
											+ "Kreditlimit"
											+ ">"
											+ ((out1.Kreditlimit == null) ? ""
													: (out1.Kreditlimit))
											+ "</" + "Kreditlimit" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1.write("<"
											+ "Score"
											+ ">"
											+ ((out1.Score == null) ? ""
													: (out1.Score)) + "</"
											+ "Score" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "Vorname"
													+ ">"
													+ ((out1.Vorname == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.Vorname)))
													+ "</" + "Vorname" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "Nachname"
													+ ">"
													+ ((out1.Nachname == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.Nachname)))
													+ "</" + "Nachname" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "Telefon"
													+ ">"
													+ ((out1.Telefon == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.Telefon)))
													+ "</" + "Telefon" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "E_Mail"
													+ ">"
													+ ((out1.E_Mail == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.E_Mail)))
													+ "</" + "E_Mail" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "Geburtsdatum"
													+ ">"
													+ ((out1.Geburtsdatum == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.Geburtsdatum)))
													+ "</" + "Geburtsdatum"
													+ ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1.write("<"
											+ "Geschlecht"
											+ ">"
											+ ((out1.Geschlecht == null) ? ""
													: (out1.Geschlecht)) + "</"
											+ "Geschlecht" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "address_id"
													+ ">"
													+ ((out1.address_id == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.address_id)))
													+ "</" + "address_id" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "Stra_e"
													+ ">"
													+ ((out1.Stra_e == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.Stra_e)))
													+ "</" + "Stra_e" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "PLZ"
													+ ">"
													+ ((out1.PLZ == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.PLZ)))
													+ "</" + "PLZ" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "Ort"
													+ ">"
													+ ((out1.Ort == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.Ort)))
													+ "</" + "Ort" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1
											.write("<"
													+ "Land"
													+ ">"
													+ ((out1.Land == null) ? ""
															: (TalendString
																	.checkCDATAForXML(out1.Land)))
													+ "</" + "Land" + ">");

									out_tFileOutputXML_1.newLine();
									out_tFileOutputXML_1.write("</" + "row"
											+ ">");

									out_tFileOutputXML_1.newLine();

									nb_line_tFileOutputXML_1++;

									tos_count_tFileOutputXML_1++;

									/**
									 * [tFileOutputXML_1 main ] stop
									 */

									/**
									 * [tFileOutputXML_1 process_data_begin ]
									 * start
									 */

									currentComponent = "tFileOutputXML_1";

									/**
									 * [tFileOutputXML_1 process_data_begin ]
									 * stop
									 */

									/**
									 * [tFileOutputXML_1 process_data_end ]
									 * start
									 */

									currentComponent = "tFileOutputXML_1";

									/**
									 * [tFileOutputXML_1 process_data_end ] stop
									 */

								} // End of branch "out1"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tJoin_1 process_data_end ] start
							 */

							currentComponent = "tJoin_1";

							/**
							 * [tJoin_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Users/majus/Desktop/Wichtig/Studium/sem4/avg/A2/A2 Daten/ETL/Accounts.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tJoin_1 end ] start
				 */

				currentComponent = "tJoin_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJoin_1", true);
				end_Hash.put("tJoin_1", System.currentTimeMillis());

				/**
				 * [tJoin_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputXML_1 end ] start
				 */

				currentComponent = "tFileOutputXML_1";

				out_tFileOutputXML_1.write(footers_tFileOutputXML_1[0]);

				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.close();
				globalMap.put("tFileOutputXML_1_NB_LINE",
						nb_line_tFileOutputXML_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputXML_1", true);
				end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				/**
				 * [tFileOutputXML_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tJoin_1"
			globalMap.remove("tHash_row2");

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tJoin_1 finally ] start
				 */

				currentComponent = "tJoin_1";

				/**
				 * [tJoin_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputXML_1 finally ] start
				 */

				currentComponent = "tFileOutputXML_1";

				/**
				 * [tFileOutputXML_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_AVG_2_Unifying_Data_CSV = new byte[0];
		static byte[] commonByteArray_AVG_2_Unifying_Data_CSV = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String address_id;

		public String getAddress_id() {
			return this.address_id;
		}

		public String Stra_e;

		public String getStra_e() {
			return this.Stra_e;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String Ort;

		public String getOrt() {
			return this.Ort;
		}

		public String Land;

		public String getLand() {
			return this.Land;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.address_id == null) ? 0 : this.address_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.address_id == null) {
				if (other.address_id != null)
					return false;

			} else if (!this.address_id.equals(other.address_id))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.address_id = this.address_id;
			other.Stra_e = this.Stra_e;
			other.PLZ = this.PLZ;
			other.Ort = this.Ort;
			other.Land = this.Land;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.address_id = this.address_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AVG_2_Unifying_Data_CSV.length) {
					if (length < 1024
							&& commonByteArray_AVG_2_Unifying_Data_CSV.length == 0) {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[1024];
					} else {
						commonByteArray_AVG_2_Unifying_Data_CSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AVG_2_Unifying_Data_CSV, 0,
						length);
				strReturn = new String(commonByteArray_AVG_2_Unifying_Data_CSV,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AVG_2_Unifying_Data_CSV) {

				try {

					int length = 0;

					this.address_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.address_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Stra_e = readString(dis, ois);

				this.PLZ = readString(dis, ois);

				this.Ort = readString(dis, ois);

				this.Land = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Stra_e, dos, oos);

				writeString(this.PLZ, dos, oos);

				writeString(this.Ort, dos, oos);

				writeString(this.Land, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("address_id=" + address_id);
			sb.append(",Stra_e=" + Stra_e);
			sb.append(",PLZ=" + PLZ);
			sb.append(",Ort=" + Ort);
			sb.append(",Land=" + Land);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.address_id,
					other.address_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tFileInputDelimited_1 - inputs:()
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 -
				// inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row3,row4) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/majus/Desktop/Wichtig/Studium/sem4/avg/A2/A2 Daten/ETL/Addresses.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/majus/Desktop/Wichtig/Studium/sem4/avg/A2/A2 Daten/ETL/Addresses.csv",
								"UTF-8", ";", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row4 = null;

						row4 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row4.address_id = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row4.Stra_e = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row4.PLZ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row4.Ort = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row4.Land = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tAdvancedHash_row4 main ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 1, 1);
							}

							row4Struct row4_HashRow = new row4Struct();

							row4_HashRow.address_id = row4.address_id;

							row4_HashRow.Stra_e = row4.Stra_e;

							row4_HashRow.PLZ = row4.PLZ;

							row4_HashRow.Ort = row4.Ort;

							row4_HashRow.Land = row4.Land;

							tHash_Lookup_row4.put(row4_HashRow);

							tos_count_tAdvancedHash_row4++;

							/**
							 * [tAdvancedHash_row4 main ] stop
							 */

							/**
							 * [tAdvancedHash_row4 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							/**
							 * [tAdvancedHash_row4 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row4 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							/**
							 * [tAdvancedHash_row4 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/majus/Desktop/Wichtig/Studium/sem4/avg/A2/A2 Daten/ETL/Addresses.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_AVG_2_Unifying_Data_CSV = new byte[0];
		static byte[] commonByteArray_AVG_2_Unifying_Data_CSV = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Vorname;

		public String getVorname() {
			return this.Vorname;
		}

		public String Nachname;

		public String getNachname() {
			return this.Nachname;
		}

		public Integer KundenId;

		public Integer getKundenId() {
			return this.KundenId;
		}

		public String Telefon;

		public String getTelefon() {
			return this.Telefon;
		}

		public String E_Mail;

		public String getE_Mail() {
			return this.E_Mail;
		}

		public String Geburtsdatum;

		public String getGeburtsdatum() {
			return this.Geburtsdatum;
		}

		public Integer Geschlecht;

		public Integer getGeschlecht() {
			return this.Geschlecht;
		}

		public String AdressId;

		public String getAdressId() {
			return this.AdressId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KundenId == null) ? 0 : this.KundenId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.KundenId == null) {
				if (other.KundenId != null)
					return false;

			} else if (!this.KundenId.equals(other.KundenId))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.Vorname = this.Vorname;
			other.Nachname = this.Nachname;
			other.KundenId = this.KundenId;
			other.Telefon = this.Telefon;
			other.E_Mail = this.E_Mail;
			other.Geburtsdatum = this.Geburtsdatum;
			other.Geschlecht = this.Geschlecht;
			other.AdressId = this.AdressId;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.KundenId = this.KundenId;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AVG_2_Unifying_Data_CSV) {

				try {

					int length = 0;

					this.KundenId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.KundenId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Vorname = readString(dis, ois);

				this.Nachname = readString(dis, ois);

				this.Telefon = readString(dis, ois);

				this.E_Mail = readString(dis, ois);

				this.Geburtsdatum = readString(dis, ois);

				this.Geschlecht = readInteger(dis, ois);

				this.AdressId = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Vorname, dos, oos);

				writeString(this.Nachname, dos, oos);

				writeString(this.Telefon, dos, oos);

				writeString(this.E_Mail, dos, oos);

				writeString(this.Geburtsdatum, dos, oos);

				writeInteger(this.Geschlecht, dos, oos);

				writeString(this.AdressId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vorname=" + Vorname);
			sb.append(",Nachname=" + Nachname);
			sb.append(",KundenId=" + String.valueOf(KundenId));
			sb.append(",Telefon=" + Telefon);
			sb.append(",E_Mail=" + E_Mail);
			sb.append(",Geburtsdatum=" + Geburtsdatum);
			sb.append(",Geschlecht=" + String.valueOf(Geschlecht));
			sb.append(",AdressId=" + AdressId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KundenId, other.KundenId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tHash_row2 begin ] start
				 */

				ok_Hash.put("tHash_row2", false);
				start_Hash.put("tHash_row2", System.currentTimeMillis());

				currentComponent = "tHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tHash_row2 = 0;

				java.util.Map<row2Struct, row2Struct> tHash_row2 = new java.util.LinkedHashMap<row2Struct, row2Struct>();
				globalMap.put("tHash_row2", tHash_row2);

				/**
				 * [tHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Users/majus/Desktop/Wichtig/Studium/sem4/avg/A2/A2 Daten/ETL/Customers.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/majus/Desktop/Wichtig/Studium/sem4/avg/A2/A2 Daten/ETL/Customers.csv",
								"UTF-8", ";", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row2.Vorname = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row2.Nachname = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row2.KundenId = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"KundenId", "row2",
															temp,
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
								}

							} else {

								row2.KundenId = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 3;

							row2.Telefon = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 4;

							row2.E_Mail = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row2.Geburtsdatum = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row2.Geschlecht = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Geschlecht",
															"row2", temp,
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
								}

							} else {

								row2.Geschlecht = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row2.AdressId = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tHash_row2 main ] start
							 */

							currentComponent = "tHash_row2";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							row2Struct row2_HashRow = new row2Struct();

							row2_HashRow.Vorname = row2.Vorname;
							row2_HashRow.Nachname = row2.Nachname;
							row2_HashRow.KundenId = row2.KundenId;
							row2_HashRow.Telefon = row2.Telefon;
							row2_HashRow.E_Mail = row2.E_Mail;
							row2_HashRow.Geburtsdatum = row2.Geburtsdatum;
							row2_HashRow.Geschlecht = row2.Geschlecht;
							row2_HashRow.AdressId = row2.AdressId;
							tHash_row2.put(row2_HashRow, row2_HashRow);

							tos_count_tHash_row2++;

							/**
							 * [tHash_row2 main ] stop
							 */

							/**
							 * [tHash_row2 process_data_begin ] start
							 */

							currentComponent = "tHash_row2";

							/**
							 * [tHash_row2 process_data_begin ] stop
							 */

							/**
							 * [tHash_row2 process_data_end ] start
							 */

							currentComponent = "tHash_row2";

							/**
							 * [tHash_row2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Users/majus/Desktop/Wichtig/Studium/sem4/avg/A2/A2 Daten/ETL/Customers.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tHash_row2 end ] start
				 */

				currentComponent = "tHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tHash_row2", true);
				end_Hash.put("tHash_row2", System.currentTimeMillis());

				/**
				 * [tHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tHash_row2 finally ] start
				 */

				currentComponent = "tHash_row2";

				/**
				 * [tHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Unifying_Data_CSV Unifying_Data_CSVClass = new Unifying_Data_CSV();

		int exitCode = Unifying_Data_CSVClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Unifying_Data_CSV.class
					.getClassLoader().getResourceAsStream(
							"avg_2/unifying_data_csv_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = Unifying_Data_CSV.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Unifying_Data_CSV");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 114806 characters generated by Talend Open Studio for Data Integration on the
 * 1. Mai 2019 19:39:36 MESZ
 ************************************************************************************************/
